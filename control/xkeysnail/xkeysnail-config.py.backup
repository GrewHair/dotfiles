# -*- coding: utf-8 -*-

import re
from xkeysnail.transform import *
import os
import subprocess as sp

def wheel_up():
    """Scroll the mousewheel up"""
    os.system('xdotool click 4')

def wheel_down():
    """Scroll the mousewheel down"""
    os.system('xdotool click 5')

def wheel_left():
    """Scroll the mousewheel left"""
    os.system('xdotool click 6')

def wheel_right():
    """Scroll the mousewheel right"""
    os.system('xdotool click 7')

def set_wm_class_devtools():
    """Set WM_CLASS of the focused window to devtools"""
    os.system("xdotool set_window --class=devtools $(xdotool getactivewindow)")

def set_wm_class_devtools_normal():
    """Set WM_CLASS of the focused window to devtools_normal"""
    os.system("xdotool set_window --class=devtools_normal $(xdotool getactivewindow)")

def set_wm_class_zotero():
    """Set WM_CLASS of the focused window to Zotero"""
    os.system("xdotool set_window --class=Zotero $(xdotool getactivewindow)")
    os.system("pkill conky")

def set_wm_class_zotero_insert():
    """Set WM_CLASS of the focused window to zotero_insert"""
    os.system("i3-msg split vertical")
    os.system("conky -t '-- INSERT --' &")
    os.system("xdotool set_window --class=Zotero_insert $(xdotool getactivewindow)")

def special_zotero_insert_tag():
    os.system("xdotool set_window --class=Zotero_insert $(xdotool getactivewindow)")
    os.system("i3-msg split vertical")
    os.system("conky -t '--INSERT --' &")
    os.system("sleep 0.2")
    os.system("xdotool key ctrl+alt+9")

def set_wm_class_zotero_float():
    """Set WM_CLASS of the focused window to Zotero_float"""
    os.system("sleep 0.1")
    os.system("xdotool set_window --class=Zotero_float $(xdotool getactivewindow)")
    os.system("pkill conky")

def set_wm_class_zotero_float_insert():
    """Set WM_CLASS of the focused window to zotero_insert"""
    os.system("xdotool set_window --class=Zotero_float_insert $(xdotool getactivewindow)")
    os.system("i3-msg split vertical")
    os.system("conky -c /home/boris/.config/conky/conky-insert_float.conf -t '-- INSERT --' &")

def set_opacity_lo():
    """Set window opacity to a low value"""
    os.system("compton-trans -c 15")

def set_opacity_hi():
    """Set window opacity to a high value"""
    os.system("compton-trans -c 100")


hint_handlers = []

for i in range(30):
    def hint_handler(i=i):
        os.system('pkill mimic')
        os.system('pkill gvim')
        str_num = str(i+1)
        get_addr_cmd = f"cat /tmp/hint-data | grep ^3 | sed -n '{str_num}p' | cut -f3,4"
        addr = sp.check_output(get_addr_cmd, shell=True, text=True).strip().split('\t')
        get_text_cmd = f"cat /tmp/hint-data | grep -P '^5\t[0-9]*\t{addr[0]}\t{addr[1]}' | cut -f12 | paste -sd ' ' -"
        text = sp.check_output(get_text_cmd, shell=True, text=True)
        os.system('echo "' + text + '" > /tmp/hint-text')
        os.system('cd /home/boris/mimic1 && ./mimic -t "' + text + '" -voice slt_hts &')
        # this almost works, except for one thing: gvim starts at an unpredictable workspace
        os.system("gvim /tmp/hint-text --class=gvim_zathura -c 'nmap q ZQ | vmap q <ESC>ZQ | nmap x ZQ | vmap x <ESC>ZQ | nmap i ZQ | vmap i <ESC>ZQ | nmap o ZQ | nmap s ZQ | vmap s <ESC>ZQ | nmap d ZQ | vmap d <ESC>ZQ | nmap c ZQ | vmap c <ESC>ZQ | nmap n ZQ | vmap n <ESC>ZQ | nmap m ZQ | vmap m <ESC>ZQ | nmap , ZQ | vmap , <ESC>ZQ  | nmap f ZQ | vmap f <ESC>ZQ '")

    hint_handlers.append(hint_handler)


hint_qutebrowser_handlers = []

for i in range(30):
    def hint_qutebrowser_handler(i=i):
        os.system('pkill mimic')
        str_num = str(i+1)
        get_addr_cmd = f"cat /tmp/hint-data | grep ^3 | sed -n '{str_num}p' | cut -f3,4"
        addr = sp.check_output(get_addr_cmd, shell=True, text=True).strip().split('\t')
        get_text_cmd = f"cat /tmp/hint-data | grep -P '^5\t[0-9]*\t{addr[0]}\t{addr[1]}' | cut -f12 | paste -sd ' ' -"
        text = sp.check_output(get_text_cmd, shell=True, text=True)
        os.system('echo "' + text + '" > /tmp/hint-text')
        os.system('cd /home/boris/mimic1 && ./mimic -t "' + text + '" -voice slt_hts &')
        os.system('pkill pqiv')

    hint_qutebrowser_handlers.append(hint_qutebrowser_handler)

# define timeout for multipurpose_modmap
define_timeout(0.3)

# define_modmap(
#     {
#         Key.MENU: Key.RIGHT_META,
#     }
# )

define_multipurpose_modmap(
    {
        Key.MENU: [Key.BLUETOOTH, Key.RIGHT_META],
        Key.LEFT_ALT: [Key.SPACE, Key.LEFT_CTRL],
        Key.RIGHT_ALT: [Key.SPACE, Key.RIGHT_CTRL],
        # Key.SPACE: [Key.SPACE, Key.LEFT_CTRL],
        Key.SPACE: [Key.BLUETOOTH, Key.LEFT_META],
        Key.ENTER: [Key.ENTER, Key.RIGHT_ALT],
        # Key.BACKSLASH: [Key.BACKSLASH, Key.RIGHT_ALT],  # this only makes sense on the microsoft keyboard
        Key.CAPSLOCK: [Key.ESC, Key.LEFT_ALT],
        Key.LEFT_CTRL: [Key.CAPSLOCK, Key.LEFT_CTRL],
        Key.SLASH: [Key.SLASH, Key.RIGHT_SHIFT],
    }
)


define_keymap(re.compile("^devtools$"), {
    K("M-h"): K("LEFT"),  # delete?
    K("M-j"): K("DOWN"),  # delete?
    K("M-k"): K("UP"),  # delete?
    K("M-l"): K("RIGHT"),  # delete?
    K("M-Shift-h"): K("Shift-LEFT"),  # these 4 are for selection of text (since i can't replicate the true visual mode)
    K("M-Shift-j"): K("Shift-DOWN"),
    K("M-Shift-k"): K("Shift-UP"),
    K("M-Shift-l"): K("Shift-RIGHT"),
    K("M-C-j"): K("M-DOWN"),  # wtf are these two??
    K("M-C-k"): K("M-UP"),
    K("C-n"): K("DOWN"),
    K("C-p"): K("UP"),  # this binding does smth natively in devtools, but what it does is doubled by C-o
    K("C-f"): K("RIGHT"),  # fixed by the line below
    K("C-SLASH"): K("C-f"),
    K("C-b"): K("LEFT"), #!!!! sources
    K("M-f"): K("C-RIGHT"),
    K("M-b"): K("C-LEFT"),
    K("C-e"): K("END"),
    K("C-a"): K("HOME"),
    K("M-e"): K("C-END"),
    K("M-a"): K("C-HOME"),
    K("C-h"): K("BACKSPACE"),
    K("C-w"): K("C-BACKSPACE"),
    K("C-u"): [K("Shift-HOME"), K("DELETE")],
    K("C-d"): K("DELETE"),
    K("C-k"): [K("Shift-END"), K("DELETE")],
    K("C-j"): K("ENTER"),
    K("C-m"): K("ENTER"),
    K("M-w"): K("C-c"),
    K("C-w"): K("C-x"),  #!!!!!
    K("C-y"): K("C-v"),
    K("M-TAB"): [K("TAB"), K("TAB")],
    K("M-Shift-TAB"): [K("Shift-TAB"), K("Shift-TAB")],
    K("C-SEMICOLON"): K("C-Shift-p"),
    K("M-v"): K("C-Shift-c"),
    K("C-m"): K("C-Shift-m"),
    K("M-n"): wheel_down,
    K("M-p"): wheel_up,
    K("M-y"): wheel_up,
    K("C-g"): set_wm_class_devtools_normal,
}, "devtools")

define_keymap(re.compile("devtools_normal"), {
    K("J"): K("DOWN"),
    K("K"): K("UP"),
    K("L"): K("RIGHT"),
    K("H"): K("LEFT"),
    K("I"): set_wm_class_devtools,
}, "devtools_normal")

define_keymap(re.compile("^pqiv_hint$"), {
    K("Q"): hint_handlers[0],
    K("W"): hint_handlers[1],
    K("E"): hint_handlers[2],
    K("R"): hint_handlers[3],
    K("T"): hint_handlers[4],
    K("Y"): hint_handlers[5],
    K("U"): hint_handlers[6],
    K("I"): hint_handlers[7],
    K("O"): hint_handlers[8],
    K("P"): hint_handlers[9],
    K("LEFT_BRACE"): hint_handlers[10],
    K("RIGHT_BRACE"): hint_handlers[11],
    K("A"): hint_handlers[12],
    K("S"): hint_handlers[13],
    K("D"): hint_handlers[14],
    K("F"): hint_handlers[15],
    K("G"): hint_handlers[16],
    K("H"): hint_handlers[17],
    K("J"): hint_handlers[18],
    K("K"): hint_handlers[19],
    K("L"): hint_handlers[20],
    K("SEMICOLON"): hint_handlers[21],
    K("Z"): hint_handlers[22],
    K("X"): hint_handlers[23],
    K("C"): hint_handlers[24],
    K("V"): hint_handlers[25],
    K("B"): hint_handlers[26],
    K("N"): hint_handlers[27],
    K("M"): hint_handlers[28],
    K("SLASH"): hint_handlers[29],
    K("C-r"): K("N"),
    K("C-g"): K("Q"),
    K("C-c"): K("Q"),
    K("C-LEFT_BRACE"): K("Q"),
    K("ESC"): K("Q"),
    K("C-o"): set_opacity_lo,
    K("C-i"): set_opacity_hi,
}, "pqiv_hint")

define_keymap(re.compile("pqiv_hint_qutebrowser"), {
    K("Q"): hint_qutebrowser_handlers[0],
    K("W"): hint_qutebrowser_handlers[1],
    K("E"): hint_qutebrowser_handlers[2],
    K("R"): hint_qutebrowser_handlers[3],
    K("T"): hint_qutebrowser_handlers[4],
    K("Y"): hint_qutebrowser_handlers[5],
    K("U"): hint_qutebrowser_handlers[6],
    K("I"): hint_qutebrowser_handlers[7],
    K("O"): hint_qutebrowser_handlers[8],
    K("P"): hint_qutebrowser_handlers[9],
    K("LEFT_BRACE"): hint_qutebrowser_handlers[10],
    K("RIGHT_BRACE"): hint_qutebrowser_handlers[11],
    K("A"): hint_qutebrowser_handlers[12],
    K("S"): hint_qutebrowser_handlers[13],
    K("D"): hint_qutebrowser_handlers[14],
    K("F"): hint_qutebrowser_handlers[15],
    K("G"): hint_qutebrowser_handlers[16],
    K("H"): hint_qutebrowser_handlers[17],
    K("J"): hint_qutebrowser_handlers[18],
    K("K"): hint_qutebrowser_handlers[19],
    K("L"): hint_qutebrowser_handlers[20],
    K("SEMICOLON"): hint_qutebrowser_handlers[21],
    K("Z"): hint_qutebrowser_handlers[22],
    K("X"): hint_qutebrowser_handlers[23],
    K("C"): hint_qutebrowser_handlers[24],
    K("V"): hint_qutebrowser_handlers[25],
    K("B"): hint_qutebrowser_handlers[26],
    K("N"): hint_qutebrowser_handlers[27],
    K("M"): hint_qutebrowser_handlers[28],
    K("SLASH"): hint_qutebrowser_handlers[29],
    K("C-r"): K("N"),
    K("C-g"): K("Q"),
    K("C-c"): K("Q"),
    K("C-LEFT_BRACE"): K("Q"),
    K("ESC"): K("Q"),
    K("C-o"): set_opacity_lo,
    K("C-i"): set_opacity_hi,
}, "pqiv_hint_qutebrowser")

define_keymap(re.compile("^Zotero$|^Zotero_float$|^zenity_hjkl$|^Python3$"), {
    K("J"): K("DOWN"),
    K("K"): K("UP"),
    K("L"): K("RIGHT"),
    K("H"): K("LEFT"),
    K("C-J"): K("C-DOWN"),
    K("C-K"): K("C-UP"),
    K("C-L"): K("C-RIGHT"),
    K("C-H"): K("C-LEFT"),
    K("C-T"): K("C-SPACE"),
    K("Shift-J"): K("Shift-DOWN"),
    K("Shift-K"): K("Shift-UP"),
    K("Shift-L"): K("Shift-RIGHT"),
    K("Shift-H"): K("Shift-LEFT"),
    K("G"): K("HOME"),
    K("Shift-G"): K("END"),
    K("C-G"): K("ESC"),
    K("C-C"): K("ESC"),
    K("C-LEFT_BRACE"): K("ESC"),
}, "Vim normal mode bindings + multicursor")

define_keymap(re.compile("^Zotero$"), {
    K("O"): K("F4"),
    K("D"): {
        K("C"): K("DELETE"),
        K("D"): K("Shift-DELETE"),
    },
    K("SPACE"): {
        K("KEY_2"): K("C-Shift-L"),
        K("KEY_3"): [K("C-T"), K("TAB"), K("TAB"),],
        K("KEY_7"): K("C-KEY_7"),
        K("KEY_8"): K("C-KEY_8"),
        K("KEY_9"): K("C-KEY_9"),
        K("KEY_0"): K("C-KEY_0"),
        K("A"): {
            K("S"): K("C-S"),
        },
        K("F"): {
            K("F"): [K("C-M-N"), K("UP"), K("UP"), K("ENTER"), set_wm_class_zotero_float],
        },
    },
    K("C"): {
        K("C"): K("F2"),
        K("KEY_7"): [ K("C-M-KEY_7"), set_wm_class_zotero_insert ],
        K("KEY_8"): [ K("C-M-KEY_8"), set_wm_class_zotero_insert ],
        K("KEY_9"): [ K("C-M-KEY_9"), set_wm_class_zotero_insert ],
        K("KEY_9"): special_zotero_insert_tag,
        K("KEY_0"): K("C-M-KEY_0"),
    },
    K("Q"): {
        K("Q"): K("C-W"),
    },
    K("SLASH"): [K("C-F"), set_wm_class_zotero_insert],
    K("I"): set_wm_class_zotero_insert,
}, "Spacemacs-style bindings for Zotero + insert mode entry point")

define_keymap(re.compile("^Zotero$|^Zotero_insert$"), {
    K("C-KEY_2"): [K("C-Shift-L"), set_wm_class_zotero],
    K("C-KEY_3"): [K("C-T"), K("TAB"), K("TAB"), set_wm_class_zotero],
}, "Focus Zotero's collections and items panes in both normal and insert modes")

define_keymap(re.compile("^Zotero_float$"), {
    K("SLASH"): [ K("C-F"), set_wm_class_zotero_float_insert],
    K("I"): set_wm_class_zotero_float_insert,
}, "Zotero floating insert mode entry point")

define_keymap(re.compile("Zotero|^zenity_hjkl$"), {
    K("C-I"): K("TAB"),
    K("C-M-I"): K("Shift-TAB"),
    K("C-n"): K("DOWN"),
    K("C-p"): K("UP"),
    K("C-f"): K("RIGHT"),
    K("C-b"): K("LEFT"),
    K("M-f"): K("C-RIGHT"),
    K("M-b"): K("C-LEFT"),
    K("C-e"): K("END"),
    K("C-a"): K("HOME"),
    K("M-e"): K("C-END"),
    K("M-a"): K("C-HOME"),
    K("C-h"): K("BACKSPACE"),
    K("C-w"): K("C-BACKSPACE"),
    K("C-u"): [K("Shift-HOME"), K("DELETE")],
    K("C-d"): K("DELETE"),
    K("C-k"): [K("Shift-END"), K("DELETE")],
    K("C-j"): K("ENTER"),
    K("C-m"): K("ENTER"),
}, "Readline-style bindings for Zotero")

define_keymap(re.compile("^Zotero_float_insert$"), {
    K("ESC"): [K("ESC"), set_wm_class_zotero_float],
    K("C-G"): [K("ESC"), set_wm_class_zotero_float],
    K("C-C"): [K("ESC"), set_wm_class_zotero_float],
    K("C-LEFT_BRACE"): [K("ESC"), set_wm_class_zotero_float],
}, "Zotero floating normal mode entry point")

define_keymap(re.compile("^Zotero_insert$"), {
    K("ESC"): [K("ESC"), set_wm_class_zotero],
    K("C-G"): [K("ESC"), set_wm_class_zotero],
    K("C-C"): [K("ESC"), set_wm_class_zotero],
    K("C-LEFT_BRACE"): [K("ESC"), set_wm_class_zotero],
}, "Zotero normal mode entry point")

#define_multipurpose_modmap(
#    {Key.RIGHT_SHIFT: [Key.CAPSLOCK, Key.RIGHT_SHIFT]}
#)


# define_keymap(None, {K("C-e"): K("BTN_WHEEL")})

#os.system("xmodmap -e 'clear mod3'")
#os.system("xmodmap -e 'keycode 247 = F3'")
#os.system("xmodmap -e 'keycode 248 = Tab'")
#os.system("xmodmap -e 'keycode 69 = Hyper_R'")
#os.system("xmodmap -e 'keycode 23 = Hyper_L'")
#os.system("xmodmap -e 'add mod3 = Hyper_R'")
#os.system("xmodmap -e 'add mod3 = Hyper_L'")
#os.system("xcape -e 'Hyper_R=F3'")
#os.system("xcape -e 'Hyper_R=Tab'")
