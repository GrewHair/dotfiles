import subprocess
import os
from qutebrowser.api import interceptor
# from itertools import product
# from random import shuffle

# flake8: noqa

# Autogenerated config.py
#
# NOTE: config.py is intended for advanced users who are comfortable
# with manually migrating the config file on qutebrowser upgrades. If
# you prefer, you can also configure qutebrowser using the
# :set/:bind/:config-* commands without having to write a config.py
# file.
#
# Documentation:
#   qute://help/configuring.html
#   qute://help/settings.html

# Uncomment this to still load settings configured via autoconfig.yml
# config.load_autoconfig()

# Which cookies to accept. With QtWebEngine, this setting also controls
# other features with tracking capabilities similar to those of cookies;
# including IndexedDB, DOM storage, filesystem API, service workers, and
# AppCache. Note that with QtWebKit, only `all` and `never` are
# supported as per-domain values. Setting `no-3rdparty` or `no-
# unknown-3rdparty` per-domain on QtWebKit will have the same effect as
# `all`. If this setting is used with URL patterns, the pattern gets
# applied to the origin/first party URL of the page making the request,
# not the request URL.
# Type: String
# Valid values:
#   - all: Accept all cookies.
#   - no-3rdparty: Accept cookies from the same origin only. This is known to break some sites, such as GMail.
#   - no-unknown-3rdparty: Accept cookies from the same origin only, unless a cookie is already set for the domain. On QtWebEngine, this is the same as no-3rdparty.
#   - never: Don't accept cookies at all.
config.set('content.cookies.accept', 'all', 'chrome-devtools://*')

# Which cookies to accept. With QtWebEngine, this setting also controls
# other features with tracking capabilities similar to those of cookies;
# including IndexedDB, DOM storage, filesystem API, service workers, and
# AppCache. Note that with QtWebKit, only `all` and `never` are
# supported as per-domain values. Setting `no-3rdparty` or `no-
# unknown-3rdparty` per-domain on QtWebKit will have the same effect as
# `all`. If this setting is used with URL patterns, the pattern gets
# applied to the origin/first party URL of the page making the request,
# not the request URL.
# Type: String
# Valid values:
#   - all: Accept all cookies.
#   - no-3rdparty: Accept cookies from the same origin only. This is known to break some sites, such as GMail.
#   - no-unknown-3rdparty: Accept cookies from the same origin only, unless a cookie is already set for the domain. On QtWebEngine, this is the same as no-3rdparty.
#   - never: Don't accept cookies at all.
config.set('content.cookies.accept', 'all', 'devtools://*')

# User agent to send.  The following placeholders are defined:  *
# `{os_info}`: Something like "X11; Linux x86_64". * `{webkit_version}`:
# The underlying WebKit version (set to a fixed value   with
# QtWebEngine). * `{qt_key}`: "Qt" for QtWebKit, "QtWebEngine" for
# QtWebEngine. * `{qt_version}`: The underlying Qt version. *
# `{upstream_browser_key}`: "Version" for QtWebKit, "Chrome" for
# QtWebEngine. * `{upstream_browser_version}`: The corresponding
# Safari/Chrome version. * `{qutebrowser_version}`: The currently
# running qutebrowser version.  The default value is equal to the
# unchanged user agent of QtWebKit/QtWebEngine.  Note that the value
# read from JavaScript is always the global value. With QtWebEngine
# between 5.12 and 5.14 (inclusive), changing the value exposed to
# JavaScript requires a restart.
# Type: FormatString
config.set('content.headers.user_agent', 'Mozilla/5.0 ({os_info}) AppleWebKit/{webkit_version} (KHTML, like Gecko) {upstream_browser_key}/{upstream_browser_version} Safari/{webkit_version}', 'https://web.whatsapp.com/')

# User agent to send.  The following placeholders are defined:  *
# `{os_info}`: Something like "X11; Linux x86_64". * `{webkit_version}`:
# The underlying WebKit version (set to a fixed value   with
# QtWebEngine). * `{qt_key}`: "Qt" for QtWebKit, "QtWebEngine" for
# QtWebEngine. * `{qt_version}`: The underlying Qt version. *
# `{upstream_browser_key}`: "Version" for QtWebKit, "Chrome" for
# QtWebEngine. * `{upstream_browser_version}`: The corresponding
# Safari/Chrome version. * `{qutebrowser_version}`: The currently
# running qutebrowser version.  The default value is equal to the
# unchanged user agent of QtWebKit/QtWebEngine.  Note that the value
# read from JavaScript is always the global value. With QtWebEngine
# between 5.12 and 5.14 (inclusive), changing the value exposed to
# JavaScript requires a restart.
# Type: FormatString
config.set('content.headers.user_agent', 'Mozilla/5.0 ({os_info}) AppleWebKit/{webkit_version} (KHTML, like Gecko) {upstream_browser_key}/{upstream_browser_version} Safari/{webkit_version} Edg/{upstream_browser_version}', 'https://accounts.google.com/*')

# User agent to send.  The following placeholders are defined:  *
# `{os_info}`: Something like "X11; Linux x86_64". * `{webkit_version}`:
# The underlying WebKit version (set to a fixed value   with
# QtWebEngine). * `{qt_key}`: "Qt" for QtWebKit, "QtWebEngine" for
# QtWebEngine. * `{qt_version}`: The underlying Qt version. *
# `{upstream_browser_key}`: "Version" for QtWebKit, "Chrome" for
# QtWebEngine. * `{upstream_browser_version}`: The corresponding
# Safari/Chrome version. * `{qutebrowser_version}`: The currently
# running qutebrowser version.  The default value is equal to the
# unchanged user agent of QtWebKit/QtWebEngine.  Note that the value
# read from JavaScript is always the global value. With QtWebEngine
# between 5.12 and 5.14 (inclusive), changing the value exposed to
# JavaScript requires a restart.
# Type: FormatString
config.set('content.headers.user_agent', 'Mozilla/5.0 ({os_info}) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99 Safari/537.36', 'https://*.slack.com/*')

# User agent to send.  The following placeholders are defined:  *
# `{os_info}`: Something like "X11; Linux x86_64". * `{webkit_version}`:
# The underlying WebKit version (set to a fixed value   with
# QtWebEngine). * `{qt_key}`: "Qt" for QtWebKit, "QtWebEngine" for
# QtWebEngine. * `{qt_version}`: The underlying Qt version. *
# `{upstream_browser_key}`: "Version" for QtWebKit, "Chrome" for
# QtWebEngine. * `{upstream_browser_version}`: The corresponding
# Safari/Chrome version. * `{qutebrowser_version}`: The currently
# running qutebrowser version.  The default value is equal to the
# unchanged user agent of QtWebKit/QtWebEngine.  Note that the value
# read from JavaScript is always the global value. With QtWebEngine
# between 5.12 and 5.14 (inclusive), changing the value exposed to
# JavaScript requires a restart.
# Type: FormatString
config.set('content.headers.user_agent', 'Mozilla/5.0 ({os_info}; rv:71.0) Gecko/20100101 Firefox/71.0', 'https://docs.google.com/*')

# User agent to send.  The following placeholders are defined:  *
# `{os_info}`: Something like "X11; Linux x86_64". * `{webkit_version}`:
# The underlying WebKit version (set to a fixed value   with
# QtWebEngine). * `{qt_key}`: "Qt" for QtWebKit, "QtWebEngine" for
# QtWebEngine. * `{qt_version}`: The underlying Qt version. *
# `{upstream_browser_key}`: "Version" for QtWebKit, "Chrome" for
# QtWebEngine. * `{upstream_browser_version}`: The corresponding
# Safari/Chrome version. * `{qutebrowser_version}`: The currently
# running qutebrowser version.  The default value is equal to the
# unchanged user agent of QtWebKit/QtWebEngine.  Note that the value
# read from JavaScript is always the global value. With QtWebEngine
# between 5.12 and 5.14 (inclusive), changing the value exposed to
# JavaScript requires a restart.
# Type: FormatString
config.set('content.headers.user_agent', 'Mozilla/5.0 ({os_info}; rv:71.0) Gecko/20100101 Firefox/71.0', 'https://drive.google.com/*')

# Load images automatically in web pages.
# Type: Bool
config.set('content.images', True, 'chrome-devtools://*')

# Load images automatically in web pages.
# Type: Bool
config.set('content.images', True, 'devtools://*')

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'chrome-devtools://*')

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'devtools://*')

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'chrome://*/*')

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'qute://*/*')

# Switch to insert mode when clicking flash and other plugins.
# Type: Bool
c.input.insert_mode.plugins = True

# === My Configs ===

config.load_autoconfig(False)

## Unbind stuff in normal mode
config.unbind('<Ctrl-Tab>')
config.unbind('<Ctrl-t>')
config.unbind('<Ctrl-n>')
config.unbind('<Ctrl-Shift-n>')
config.unbind('<Ctrl-w>')
config.unbind('<Ctrl-Shift-w>')
config.unbind('<Ctrl-PgDown>')
config.unbind('<Ctrl-PgUp>')
config.unbind('<F5>')
config.unbind('<Ctrl-F5>')
config.unbind('<Back>')
config.unbind('<Forward>')
config.unbind('<F11>')
config.unbind('<Ctrl-Shift-t>')
config.unbind('<Ctrl-Shift-Tab>')
config.unbind('<Ctrl-^>')
config.unbind('<Alt+1>')
config.unbind('<Alt+2>')
config.unbind('<Alt+3>')
config.unbind('<Alt+4>')
config.unbind('<Alt+5>')
config.unbind('<Alt+6>')
config.unbind('<Alt+7>')
config.unbind('<Alt+8>')
config.unbind('<Alt+9>')
config.unbind('<Ctrl-h>')
config.unbind('<Ctrl-s>')
config.unbind('<Ctrl-Alt-p>')
config.unbind('<Ctrl-p>')
config.unbind('<Ctrl-Q>') # :q should be enough
config.unbind('ad') # download cancel
config.unbind('cd') # download clear
config.unbind('g$') # tab-focus -1 (<Ctrl-0> should be enough)
config.unbind('g0') # tab-focus 1 (<Ctrl-1> should be enough)
config.unbind('g^') # tab-focus 1 (<Ctrl-1> should be enough)
config.unbind('ga') # open -t (O + <Enter> should be enough)
config.unbind('gb') # bookmark-load (i'll deal with bookmarks later when i install buku)  !!!!!!!!!
config.unbind('gB') # bookmark-load -t (i'll deal with bookmarks later when i install buku)  !!!!!!!!
config.unbind('gC') # tab-clone
config.unbind('gd') # download
config.unbind('gD') # tab-give
config.unbind('gf') # view source (i don't know what to do with it yet) !!!!!! ALERT!!!!!
# config.unbind('gl') # tab-move -
config.unbind('gm') # tab-move
config.unbind('gO') # set-cmd-text :open -t -r {url:pretty}
config.unbind('go') # set-cmd-text :open {url:pretty}
# config.unbind('gr') # tab-move +
config.unbind('gt') # set-cmd-text -s :buffer
config.unbind('gU') # navigate up -t
config.unbind('co') # tab-only
config.unbind('J')
config.unbind('K')
config.unbind('r') # Prevent accidental reloads
config.unbind('R') # Prevent accidental reloads
config.unbind('xo') # set-cmd-text -s :open -b
config.unbind('xO') # set-cmd-text :open -b -r {url:pretty}
config.unbind('d') # tab-close
config.unbind('D') # tab-close -o
config.unbind('th') # back -t
config.unbind('tl') # forward -t
config.unbind('o') # open
config.unbind('O') # open -t
config.unbind('wh') # back -w
config.unbind('wl') # forward -w
config.unbind('.') # repeat last action (it may be problematic with russian layout
c.bindings.key_mappings = {} # Unmap <Ctrl-[> so codemirror can use it

# Make normal mode language agnostic
en_symbols = list("qwertyuiop[]asdfghjkl;'zxcvbnm,.QWERTYUIOP{}ASDFGHJKL:\"ZXCVBNM<>")
ru_symbols = list("йцукенгшщзхъфывапролджэячсмитьбюЙЦУКЕНГШЩЗХЪФЫВАПРОЛДЖЭЯЧСМИТЬБЮ")
c.bindings.key_mappings = dict(zip(ru_symbols, en_symbols))
for i in range(32):
    c.bindings.key_mappings['<Alt-' + ru_symbols[i] + '>'] = '<Alt-' + en_symbols[i] + '>'




# The "dunder" bindings

# Command chaining (_ = dunder, c = command chain, next two digits = id of chain, last digit = id of command in chain)
# NOTE "Command chaining" is my workaround for inability of some commands (like jseval) to have additional commands chained after them normally (i.e. with ;;)
# TODO make _0, _1 and _2 bindings conform to this!


# _c00: Quick access to various sidebar tabs
# Quick navigation between open tiddlers (mapped to _dtwbb/<Space>bb/show buffers)
config.bind('_c000', 'jseval -q document.querySelector(`button[title="Show sidebar"]`).click()')  # in tiddlywiki, click 'show sidebar'
config.bind('_c001', 'jseval -q document.querySelectorAll("button:not(.tc-btn-invisible)")[0].click();')  # in tiddlywiki, click the 'open' sidebar tab  # 7
config.bind('_c002', 'later 550 hint --rapid tw-open-tiddlers')  # in tiddlywiki, hint the 'open' sidebar tab's content
# View recent tiddlers
config.bind('_c003', 'jseval -q document.querySelectorAll("button:not(.tc-btn-invisible)")[1].click();')  # 8
# Show tiddlymap
config.bind('_c004', 'jseval -q document.querySelectorAll("button:not(.tc-btn-invisible)")[4].click();')  # 11
# Show tiddlymap live tab
config.bind('_c005', 'jseval -q document.querySelectorAll("button:not(.tc-btn-invisible)")[5].click();')  # 12
# Show 'more' tab
config.bind('_c006', 'jseval -q document.querySelectorAll("button:not(.tc-btn-invisible)")[3].click();')  # 10
# Show 'missing' subtab of the 'more' tab
config.bind('_c007', 'later 550 jseval -q document.querySelectorAll("button:not(.tc-btn-invisible)")[11].click();')  # 18
# Show 'my tools' tab
config.bind('_c008', 'jseval -q document.querySelectorAll("button:not(.tc-btn-invisible)")[7].click();')
# Show 'tree' subtab of the 'my tools' tab / show 'drafts' subtab of the 'more' tab
config.bind('_c009', 'later 550 jseval -q document.querySelectorAll("button:not(.tc-btn-invisible)")[12].click();')

# _c01: do stuff respecting the current layout (i.e. in this same workspace), and change wm_class
config.bind('_c010', 'spawn -d /home/boris/bin/i3/set-respect-layout.sh')
config.bind('_c011', 'devtools window ;; later 300 spawn -d /home/boris/.local/share/qutebrowser/userscripts/change-wm-class.sh')
config.bind('_c012', 'spawn -d qutebrowser --basedir /home/boris/qutebrowser-profiles/tiddlywiki/ --qt-arg name tiddlywiki')


# Merge windows
config.bind('__', 'set-cmd-text -s :tab-take ;; later 10 fake-key --global <Tab> ;; later 10 fake-key --global <Return>')

# Create a <div id="0">
config.bind('_0', 'jseval -q tmp=document.createElement("div");document.body.appendChild(tmp);tmp.setAttribute("id", "0");')

# Click this div
config.bind('_1', 'click-element id 0 ;; jseval -q document.getElementById("0").remove();')

# Click this div a few ms later
config.bind('_2', 'later 30 click-element id 0')



# Domain keychains: TiddlyWiki (prefix _d44tw, where _ = dunder, d = domain, 44 = ASCII code of comma (i.e. the key that is dispatched), tw = tiddlywiki ) ! I had to use ascii code instead of the character itself, because when xdotool types it, it collides with the actual key pressed by me.. digits are safe since they're not used in keychains usually.
# NOTE "Domain keychains" is my (ugly and dirty) workaround the absence of the native domain-specific keybindings

# x key
config.bind('_d88tw', 'hint --first tw-story-river-close')  # close the top non-draft tiddler in the story river

# s key
config.bind('_d83twh', 'reveal_(tw)')
c.aliases['reveal_(tw)'] = 'hint tw-story-river-tiddlylinks hover'  # hover over tiddlylinks to trigger the preview plugin
config.bind('_d83twp', 'speak_(tw)')
c.aliases['speak_(tw)'] = 'hint tw-paragraphs userscript run-mimic.sh'  # hover over tiddlylinks to trigger the preview plugin
config.bind('_d83tws', 'select-what-to-focus_(tw)')
c.aliases['select-what-to-focus_(tw)'] = 'hint tiddlers-and-fields'

# , key
config.bind('_d44twft', 'file-tree_(tw)')
c.aliases['file-tree_(tw)'] = 'mode-enter normal ;; fake-key --global _c000 ;; fake-key --global _c008 ;; fake-key --global _c009'  # click the 'tree' tab of 'my tools'
config.bind('_d44twts', 'toggle-sidebar_(tw)')  # toggle sidebar
c.aliases['toggle-sidebar_(tw)'] = 'fake-key <Ctrl-]>'  # toggle sidebar
config.bind('_d44twbb', 'list-buffers_(tw)')
c.aliases['list-buffers_(tw)'] = 'mode-enter normal ;; fake-key --global _c000 ;; fake-key --global _c001 ;; fake-key --global _c002' # click the 'open' sidebar tab and hint its content
config.bind('_d44twbd', 'draft-buffers_(tw)')
c.aliases['draft-buffers_(tw)'] = 'fake-key --global _c000 ;; fake-key --global _c006 ;; fake-key --global _c009'  # click the 'drafts' button of the 'more' tab
config.bind('_d44twfr', 'recent-tiddlers_(tw)')
c.aliases['recent-tiddlers_(tw)'] = 'mode-enter normal ;; fake-key --global _c000 ;; fake-key --global _c003'  # show the 'recent' sidebar tab
config.bind('_d44twfm', 'missing-tiddlers_(tw)')
c.aliases['missing-tiddlers_(tw)'] = 'fake-key --global _c000 ;; fake-key --global _c006 ;; fake-key --global _c007'  # show the missing tiddlers
config.bind('_d44twam', 'tiddlymap_(tw)')
c.aliases['tiddlymap_(tw)'] = 'mode-enter normal ;; fake-key --global _c000 ;; fake-key --global _c004'  # click the 'map' sidebar tab
config.bind('_d44twal', 'tmap-live-view_(tw)')
c.aliases['tmap-live-view_(tw)'] = 'mode-enter normal ;; fake-key --global _c000 ;; fake-key --global _c005'  # click the 'live' sidebar tab
config.bind('_d44twas', 'advanced-search_(tw)')
c.aliases['advanced-search_(tw)'] = 'fake-key <Ctrl-Shift-A> ;; mode-enter insert'  # open advanced search and hint its tabs (and input)
config.bind('_d44twss', 'sidebar-search_(tw)')
c.aliases['sidebar-search_(tw)'] = 'fake-key <Ctrl-Shift-F> ;; mode-enter insert'  # sidebar search
config.bind('_d44twn', 'new-tiddler')
c.aliases['new-tiddler'] = 'fake-key <Ctrl-Shift-N> ;; mode-enter insert'  # new tiddler
config.bind('_d44twtp', 'toggle-preview_(tw)')
c.aliases['toggle-preview_(tw)'] = 'fake-key <Ctrl-;>'  # toggle preview
config.bind('_d44twiu', 'insert-unicode_(tw)')
c.aliases['insert-unicode_(tw)'] = 'spawn /home/boris/bin/i3/insert_unicode.sh'  # insert a unicode character
config.bind('_d44twis', "insert-snippet_(tw)")
c.aliases['insert-snippet_(tw)'] = "fake-key <Ctrl-S> ;; later 20 hint tw-editor-submenu"  # insert snippet (+ hint the dropdown menu)
config.bind('_d44twip', 'insert-picture_(tw)')
config.bind('_d44twii', 'insert-picture_(tw)')
c.aliases['insert-picture_(tw)'] = 'fake-key <Ctrl-Shift-I> ;; later 20 hint tw-editor-submenu'  # insert picture (+ hint the dropdowm menu)
config.bind('_d44twil', 'insert-wikilink_(tw)')
c.aliases['insert-wikilink_(tw)'] = 'fake-key <Ctrl-L> ;; mode-enter insert'  # insert wikilink
config.bind('_d44twit', 'insert-transclusion_(tw)')
c.aliases['insert-transclusion_(tw)'] = 'fake-key <Ctrl-T> ;; mode-enter insert'  # insert transclusion
config.bind('_d44twim', 'insert-macro_(tw)')
c.aliases['insert-macro_(tw)'] = 'fake-key <Ctrl-M> ;; mode-enter insert'  # insert macro
config.bind('_d44twe', 'excise_(tw)')
c.aliases['excise_(tw)'] = 'fake-key <Ctrl-E> ;; later 20 hint --rapid tw-editor-submenu'  # excise to other tiddler (+ hint the dropdowm menu)
config.bind('_d44twch', 'codemirror-height_(tw)')
c.aliases['codemirror-height_(tw)'] = 'hint --first tw-editor-height ;; later 50 hint --rapid tw-editor-submenu'  # open editor height submenu and hint
config.bind('_d44twfw', 'fields-width_(tw)')
c.aliases['fields-width_(tw)'] = 'hint --first select'   # hint fields width select item
config.bind('_d44twgg', 'run-with-count 500 scroll up')
config.bind('_d44twG', 'run-with-count 500 scroll down')

# config.bind('<Ctrl-C>bb', 'jseval document.querySelectorAll("button")[7].click();', mode='insert')
# config.bind('<Ctrl-C>fr', 'jseval document.querySelectorAll("button")[8].click();', mode='insert')
# config.bind('<Ctrl-C>am', 'jseval document.querySelectorAll("button")[11].click();', mode='insert')
# config.bind('<Ctrl-C>al', 'jseval document.querySelectorAll("button")[12].click();', mode='insert')

config.bind('<Ctrl-C>bb', 'list-buffers_(tw)', mode='insert')
config.bind('<Ctrl-C>fr', 'recent-tiddlers_(tw)', mode='insert')
config.bind('<Ctrl-C>am', 'tiddlymap_(tw)', mode='insert')
config.bind('<Ctrl-C>al', 'tmap-live-view_(tw)', mode='insert')

# Domain keychains: youtube (prefix _dyt, where _ = dunder, d = domain, yt = youtube)
config.bind('_d44yt0', 'seek_0%')
c.aliases['seek_0%'] = 'fake-key 0'
config.bind('_d44yt1', 'fake-key 1')
config.bind('_d44yt2', 'fake-key 2')
config.bind('_d44yt3', 'fake-key 3')
config.bind('_d44yt4', 'fake-key 4')
config.bind('_d44yt5', 'fake-key 5')
config.bind('_d44yt6', 'fake-key 6')
config.bind('_d44yt7', 'fake-key 7')
config.bind('_d44yt8', 'fake-key 8')
config.bind('_d44yt9', 'fake-key 9')
config.bind('_d44ytc', 'fake-key c')
config.bind('_d44ytt', 'fake-key t')
config.bind('_d44ytf', 'fake-key f ;; spawn i3-msg fullscreen disable')
config.bind('_d44yti', 'fake-key i')
config.bind('_d44yt/', 'fake-key /')
config.bind('_d44yt,', 'fake-key <Shift-,>')
config.bind('_d44yt.', 'fake-key <Shift-.>')
config.bind('_d44yts', 'hint yt-skip-ad')

# Domain keychains: all websites
config.bind('_d88al', 'tab-close')  # the normal x-key action

# Aliases
c.aliases['yt-hide'] = 'jseval document.querySelector("#container.style-scope.ytd-masthead").style.display="none";'
c.aliases['yt-show'] = 'jseval document.querySelector("#container.style-scope.ytd-masthead").style.display="block";'
c.aliases['stylesheets-on'] = 'set content.user_stylesheets "~/.local/share/qutebrowser/stylesheets/solarized-everything-css/css/gruvbox/gruvbox-all-sites.css"'
c.aliases['stylesheets-off'] = 'set content.user_stylesheets ""'
c.aliases['merge-windows'] = 'fake-key --global _0_0_0_0'
c.aliases['noh'] = 'search'
c.aliases['bindings'] = 'open qute://bindings/'
c.aliases['bookmarks'] = 'open qute://bookmarks/'
c.aliases['version'] = 'open qute://version/'
c.aliases['buku-add'] = 'spawn buku -a {url}'
c.aliases['buku-load'] = 'spawn buku_run'

# Search engines
c.url.searchengines['google'] = "https://www.google.com/search?q={}"
c.url.searchengines['youtube'] = "https://www.youtube.com/search?q={}"
c.url.searchengines['reddit'] = "https://www.reddit.com/search?q={}"
c.url.searchengines['stackoverflow'] = "https://www.stackoverflow.com/search?q={}"
c.url.searchengines['math.stackexchange'] = "https://math.stackexchange.com/search?q={}"
c.url.searchengines['askubuntu'] = "https://askubuntu.com/search?q={}"
c.url.searchengines['wikipedia'] = "https://wikipedia.org/wiki/{}"
c.url.searchengines['emuparadise'] = "https://www.emuparadise.me/roms/search.php?query={}"
c.url.searchengines['python.org'] = "https://www.python.org/search/?q={}"
c.url.searchengines['greasespot'] = "https://wiki.greasespot.net/index.php?title=Special%3ASearch&search={}&go=Go"
c.url.searchengines['greasyfork'] = "https://greasyfork.org/en/scripts?q={}"
c.url.searchengines['openuserjs'] = "https://openuserjs.org/?q={}"
c.url.searchengines['svg-wikimedia'] = "https://commons.wikimedia.org/w/index.php?sort=relevance&search={}+filemime%3Aimage%2Fsvg%2Bxml&title=Special:Search&profile=advanced&fulltext=1&advancedSearch-current=%7B%22fields%22%3A%7B%22filetype%22%3A%22image%2Fsvg%2Bxml%22%7D%7D&ns0=1&ns1=1&ns2=1&ns3=1&ns4=1&ns5=1&ns6=1&ns7=1&ns8=1&ns9=1&ns10=1&ns11=1&ns12=1&ns13=1&ns14=1&ns15=1&ns100=1&ns101=1&ns102=1&ns103=1&ns104=1&ns105=1&ns106=1&ns107=1&ns460=1&ns461=1&ns486=1&ns487=1&ns490=1&ns491=1&ns828=1&ns829=1&ns1198=1&ns1199=1&ns2300=1&ns2301=1&ns2302=1&ns2303=1"
c.url.searchengines['github'] = "https://github.com/search?q={}"
c.url.searchengines['translate:ru-to-en'] = "https://translate.google.com/#view=home&op=translate&sl=ru&tl=en&text={}"
c.url.searchengines['translate:en-to-ru'] = "https://translate.google.com/#view=home&op=translate&sl=en&tl=ru&text={}"

# Characters used for hint strings
#c.hints.chars 'asdfghjkl'
#c.hints.chars = "asdfghl;qwertuiop[xcvnm,./"
#c.hints.chars = "sdfghlwertuioxcvnm,.249"
c.hints.chars = "sfgwrtuiocvnm.23489"

# an attempt to make up a dictionary for hints.
# turns out you have to have a file for this instead - so fuck it
# left_hand_double = 'sdfwe'
# rignt_hand_double = 'jklio'
# left_hand_single = 'rcv23'
# right_hand_single = 'unm.89'

# double_hints = []

# for i, j in product(left_hand_double, right_hand_double):
#     double_hints.append(i+j)
#     if j != 'j':
#         double_hints.append(j+i)

# double_hints = shuffle(double_hints)


# Add hints selectors
c.hints.selectors['paragraphs'] = ['div, span, p, ol, ul, h1, h2, h3, h4, h5, h6']
c.hints.selectors['alll'] = ['*']
c.hints.selectors['yt'] = ['yt-formatted-string']
c.hints.selectors['yt-video'] = ['video']
c.hints.selectors['all'].append('yt-formatted-string')
c.hints.selectors['all'].append('h3 span')
c.hints.selectors['all'].append('span.qt_read_more')   # the fucking quora's read button!
c.hints.selectors['tables'] = ['table']
c.hints.selectors['pre'] = ['pre']
c.hints.selectors['foo'] = ['.tc-block-dropdown']
c.hints.selectors['sidebar'] = ['.tc-sidebar-tabs-main > .tc-tab-selected']
c.hints.selectors['title'] = ['.tc-site-title']
#c.hints.selectors['edit-tiddler'] = ['button[title="Edit this tiddler"], textarea, .tc-drafts-list>a, input[placeholder="tag name"], input[placeholder="field name"], input[placeholder="field value"], input.tc-titlebar']
#c.hints.selectors['edit-tiddler'] = ['.tc-image-edit-button, textarea, input[placeholder="tag name"], input[placeholder="field name"], input[placeholder="field value"], input.tc-titlebar']
c.hints.selectors['edit-tiddler'] = ['.tc-image-edit-button, .tc-image-close-button, .tc-edit-texteditor, .CodeMirror-lines, .tc-tab-buttons>button, .tc-tag-label, input[placeholder="field value"]']
c.hints.selectors['tw-snippet'] = ['button[title="Insert a preconfigured snippet of text - [ctrl-S]"]']
c.hints.selectors['tw-editor-height'] = ['button[title="Choose the height of the text editor"]']
#c.hints.selectors['sidebar-tabs-main'] = ['.tc-tab-set .tc-sidebar-tabs-main .tc-vertical']
#c.hints.selectors['sidebar-tabs-main'] = ['.tc-tab-content .tc-vertical']
c.hints.selectors['sidebar-scrollable'] = ['.tc-sidebar-scrollable']
c.hints.selectors['sidebar-scrollable-child'] = ['div.tc-sidebar-scrollable>div>div']
c.hints.selectors['codemirror'] = ['.tc-image-edit-button, .CodeMirror-lines']
c.hints.selectors['tiddler-add-tag'] = ['input[placeholder="tag name"]']
c.hints.selectors['tiddler-add-field'] = ['input[placeholder="field name"]']
c.hints.selectors['tiddler-title'] = ['input.tc-titlebar']
c.hints.selectors['tiddlers-and-fields'] = ['.tc-image-edit-button, input[placeholder="field value"], .CodeMirror-lines']
c.hints.selectors['cancel-and-delete'] = ['.tc-image-cancel-button, .tc-image-close-button, button[title="Remove field"]']
c.hints.selectors['radio-unchecked'] = ['svg']
c.hints.selectors['folder'] = ['svg.tc-image-folder']
c.hints.selectors['tw-open-tiddlers'] = ['div.tc-sidebar-tab-open-item>span>div>a']
c.hints.selectors['vis-up'] = ['.vis-up']
c.hints.selectors['vis-down'] = ['.vis-down']
c.hints.selectors['vis-left'] = ['.vis-left']
c.hints.selectors['vis-right'] = ['.vis-right']
c.hints.selectors['vis-zoomIn'] = ['.vis-zoomIn']
c.hints.selectors['vis-zoomOut'] = ['.vis-zoomOut']
# unfortunately, hinting vis buttons failed to navigate tiddlymap, so one day I am going to try stuff like pyautogui's correlation instead.
# I'll leave these selectors here just in case. Who knows - maybe they appear to be at least of some use eventually...
c.hints.selectors['tw-advanced-search'] = ['div.tc-advanced-search>div>div>button, div.tc-advanced-search>div>div>div>p>div>input']
c.hints.selectors['tw-editor-submenu'] = ['div.tc-drop-down.tc-popup-keep>a, div.tc-drop-down.tc-popup-keep>p>label>input, div.tc-drop-down.tc-popup-keep>p>label>span>input, div.tc-drop-down.tc-popup-keep>p>input, div.tc-drop-down.tc-popup-keep>p>select, div.tc-drop-down.tc-popup-keep>p>button, div.tc-drop-down.tc-popup-keep>p>div>div>a']
c.hints.selectors['select'] = ['select']
c.hints.selectors['tw-show-sidebar'] = ['button[title="Show sidebar"]']
c.hints.selectors['tw-hide-sidebar'] = ['button[title="Hide sidebar"]']
# c.hints.selectors['tw-paragraphs'] = ['section.tc-story-river div, section.tc-story-river span, section.tc-story-river p, section.tc-story-river ol, section.tc-story-river ul, section.tc-story-river h1, section.tc-story-river h2, section.tc-story-river h3, section.tc-story-river h4, section-tc-story-river h5, section-tc-story-river h6']
c.hints.selectors['tw-paragraphs'] = ['section.tc-story-river p, section.tc-story-river ol, section.tc-story-river ul']
c.hints.selectors['tw-story-river-tiddlylinks'] = ['section.tc-story-river a.tc-tiddlylink']
c.hints.selectors['tw-story-river-close'] = ['section.tc-story-river button[title="Close this tiddler"]']
c.hints.selectors['frame'] = [ 'div', 'header', 'section', 'nav']
c.hints.selectors['div'] = ['div']
c.hints.selectors['header'] = ['header']
c.hints.selectors['section'] = ['section']
c.hints.selectors['nav'] = ['nav']
c.hints.selectors['yt-skip-ad'] = ['button.ytp-ad-skip-button']

# Enable Dark Mode
#c.colors.webpage.darkmode.enabled = True
#config.set('colors.webpage.darkmode.enabled', True, 'https://github.com')
#c.colors.webpage.darkmode.algorithm = 'brightness-rgb'
#c.colors.webpage.darkmode.policy.images = 'smart'
#c.colors.webpage.darkmode.threshold.text = 150 # 256 = invert all
#c.colors.webpage.darkmode.threshold.background = 205 # 0 = invert all

#c.content.user_stylesheets = '~/.local/share/qutebrowser/stylesheets/solarized-everything-css/css/gruvbox/gruvbox-all-sites.css'
#c.content.user_stylesheets = '~/.local/share/qutebrowser/stylesheets/solarized-everything-css/css/darculized/darculized-all-sites.css'
#c.content.user_stylesheets = '~/.local/share/qutebrowser/stylesheets/qutebrowser_dark_solarized/solarized-dark.css'

#c.colors.webpage.prefers_color_scheme_dark = True

# Open base URL of a search engine if no search terms
c.url.open_base_url = True

# Insert mode on sites load
# c.input.insert_mode.auto_load = True
c.input.insert_mode.auto_load = False

# Restore mode on tab change
config.set('tabs.mode_on_change', 'restore')

# Close window when the last tab is closed
config.set('tabs.last_close', 'close')

# Messages timeout
c.messages.timeout = 3000

# Partial input timeout
c.input.partial_timeout = 0

# Downloads position
config.set('downloads.position', 'bottom')

# Tabs max width
config.set('tabs.max_width', 200)

# Hints auto-follow
c.hints.auto_follow = 'always'

# Forbid autoplay
c.content.autoplay = False

# Keyhint delay
# c.keyhint.delay = 300
c.keyhint.delay = 0

# Uppercase for hints
c.hints.uppercase = True

# config.bind(';s', 'hint paragraphs userscript tts.py')
config.bind(';s', 'hint paragraphs userscript run-mimic.sh')
config.bind(';S', 'spawn -d /home/boris/bin/i3/hint-qutebrowser.sh')
config.unbind('m')
config.bind('m', 'hint paragraphs userscript run-mimic.sh')

config.bind(';p', 'hint pre userscript yank-pre.sh')
config.bind(';T', 'hint tables userscript yank-table.sh')

config.bind('..', 'repeat-command')

config.bind(';m', 'hint links spawn --detach mpv --x11-name=mpv --ytdl-raw-options=mark-watched= {hint-url}')
# config.bind(';v', 'hint links spawn -d vivaldi --class="large" {hint-url}')
# config.bind(';P', 'spawn youtube-dl -o "/media/boris/d/Smth/%(title)s-%(id)s.%(ext)s" {url}')  # for now I'm commenting this out, because at the moment my youtube-dl doesn't work, and I need to make an 'open in palemoon' binding. I should rearrange all this crap later using some more consistent conventions!
config.bind(';x', 'spawn youtube-dl -o "/media/boris/d/Smth/%(title)s-%(id)s.%(ext)s" {url}')
#config.bind(';V', 'spawn -d vivaldi --class="large" {url}')
config.bind(';M', 'spawn -d mpv --x11-name=mpv {url}')
config.bind(';P', 'spawn -d palemoon {url}')
config.bind(';F', 'spawn -d firefox {url}')

# config.bind(';c', 'hint paragraphs userscript /home/boris/.local/share/qutebrowser/userscripts/hint-caret.sh')  # i made this binding because ;v was occupied with vivaldi. now i don't have vivaldi, so i'll use the one below:
config.bind(';v', 'hint paragraphs userscript /home/boris/.local/share/qutebrowser/userscripts/hint-caret.sh')
config.bind('f', 'hint paragraphs userscript /home/boris/.local/share/qutebrowser/userscripts/hint-caret.sh', mode='caret')

config.bind('o', 'set-cmd-text -s :open -r -t')
config.bind('O', 'set-cmd-text -s :open -r -b')
config.bind('cc', 'set-cmd-text -s :open')
config.bind('A', 'set-cmd-text -s :open -b')
config.bind('$', 'set-cmd-text -s :open -t')

config.bind('cu', 'edit-url')
config.bind('c.', 'config-edit')

config.bind('wH', 'back -w')
config.bind('wL', 'forward -w')
config.bind('wgu', 'navigate up -w')

# Insert mode page navigation
config.bind('<Ctrl-E>', 'scroll-page 0 0.05', mode='insert')
config.bind('<Ctrl-Y>', 'scroll-page 0 -0.05', mode='insert')
config.bind('<Ctrl-P>', 'fake-key <Up>', mode='insert')
config.bind('<Ctrl-N>', 'fake-key <Down>', mode='insert')
config.bind('<Ctrl-P>', 'fake-key <Up>', mode='normal')  # for normal mode compatibility
config.bind('<Ctrl-N>', 'fake-key <Down>', mode='normal')  # for normale mode compatibility
config.bind('<Ctrl-H>', 'fake-key <Backspace>', mode='insert')
config.bind('<Ctrl-W>', 'fake-key <Ctrl-Backspace>', mode='insert')
config.bind('<Ctrl-U>', 'fake-key <Shift-Home> ;; fake-key <Backspace>', mode='insert')

# Caret mode page navigation
config.bind('d', 'scroll-page 0 0.1', mode='caret')
config.bind('e', 'scroll-page 0 -0.1', mode='caret')
config.bind('<Ctrl-F>', 'scroll-page 0 1', mode='caret')
config.bind('<Ctrl-B>', 'scroll-page 0 -1', mode='caret')
config.bind('<Ctrl-D>', 'scroll-page 0 0.5', mode='caret')
config.bind('<Ctrl-U>', 'scroll-page 0 -0.5', mode='caret')
config.bind('<Ctrl-E>', 'scroll-page 0 0.05', mode='caret')
config.bind('<Ctrl-Y>', 'scroll-page 0 -0.05', mode='caret')
config.bind('s', 'spawn --userscript run-mimic-caret.sh', mode='caret')
config.bind('-', 'zoom-out', mode='caret')
config.bind('=', 'zoom-in', mode='caret')

# Prompt mode page navigation
config.bind('<Ctrl-F>', 'scroll-page 0 1', mode='prompt')
config.bind('<Ctrl-B>', 'scroll-page 0 -1', mode='prompt')
config.bind('<Ctrl-D>', 'scroll-page 0 0.5', mode='prompt')
config.bind('<Ctrl-U>', 'scroll-page 0 -0.5', mode='prompt')
config.bind('<Ctrl-E>', 'scroll-page 0 0.05', mode='prompt')
config.bind('<Ctrl-Y>', 'scroll-page 0 -0.05', mode='prompt')

# Normal mode page navigation
config.bind('<Ctrl-E>', 'scroll-page 0 0.05')
config.bind('<Ctrl-Y>', 'scroll-page 0 -0.05')
config.bind('d', 'scroll-page 0 0.1')
config.bind('e', 'scroll-page 0 -0.1')

# <Return> aliases
config.bind('<Ctrl-J>', 'command-accept', mode='command')
config.bind('<Ctrl-M>', 'command-accept', mode='command')
#config.bind('<Ctrl-J>', 'fake-key <Return>', mode='insert')
config.bind('<Ctrl-J>', 'spawn /home/boris/.local/share/qutebrowser/userscripts/IM_C-j_C-m_dispatcher.sh {url:host} {url:port}', mode='insert')
#config.bind('<Ctrl-M>', 'fake-key <Return>', mode='insert')
config.bind('<Ctrl-M>', 'spawn /home/boris/.local/share/qutebrowser/userscripts/IM_C-j_C-m_dispatcher.sh {url:host} {url:port}', mode='insert')
config.bind('<Ctrl-M>', 'spawn /home/boris/.local/share/qutebrowser/userscripts/IM_C-j_C-m_dispatcher.sh {url:host} {url:port}', mode='insert')
config.bind('<Ctrl-J>', 'selection-follow', mode='normal')
config.bind('<Ctrl-J>', 'prompt-accept', mode='prompt')
config.bind('<Ctrl-M>', 'prompt-accept', mode='prompt')

# Tab switching
config.bind('<Ctrl-.>', 'tab-move +')
config.bind('<Ctrl-,>', 'tab-move -')
config.bind('<Ctrl-.>', 'tab-move +', mode='insert')
config.bind('<Ctrl-,>', 'tab-move -', mode='insert')
config.bind('<Ctrl-.>', 'tab-move +', mode='prompt')
config.bind('<Ctrl-,>', 'tab-move -', mode='prompt')

config.bind('<Alt-J>', 'tab-next', mode='normal')
config.bind('<Alt-K>', 'tab-prev', mode='normal')
config.bind('<Alt-H>', 'tab-prev', mode='normal')
config.bind('<Alt-L>', 'tab-next', mode='normal')
config.bind('<Alt-J>', 'tab-next', mode='insert')
config.bind('<Alt-K>', 'tab-prev', mode='insert')
config.bind('<Alt-H>', 'tab-prev', mode='insert')
config.bind('<Alt-L>', 'tab-next', mode='insert')
config.bind('<Alt-K>', 'tab-prev', mode='prompt')
config.bind('<Alt-L>', 'tab-next', mode='prompt')

for key_no in range(10):
    for mode in ['normal', 'insert', 'prompt']:
        tab_to_focus = " " + str(key_no) if key_no != 0 else " -1"
        tab_to_move = " " + str(key_no) if key_no != 0 else ""
        key_to_focus = '<Ctrl-{}>'.format(key_no)
        key_to_move = '<Alt-{}>'.format(key_no)
        command_to_focus = 'tab-focus{}'.format(tab_to_focus)
        command_to_move = 'tab-move{}'.format(tab_to_move)
        config.bind(key_to_focus, command_to_focus, mode=mode)
        config.bind(key_to_move, command_to_move, mode=mode)


# Tabs
config.bind('>', 'tab-move +')
config.bind('<<', 'tab-move -')
config.bind('><', 'tab-move')
config.bind('tG', 'set-cmd-text -s :tab-give')
config.bind('tT', 'set-cmd-text -s :tab-take')
config.bind('typ', 'tab-clone')
config.bind('tk', 'set tabs.position top')
config.bind('tj', 'set tabs.position bottom')
config.bind('th', 'set tabs.position left')
config.bind('tl', 'set tabs.position right')
config.bind('tt', 'config-cycle -p tabs.show always switching')
config.bind('tw', 'open -r -t http://127.0.0.1:8081/')
config.bind('t--', 'set-cmd-text -s :set tabs.width')
config.bind('tH', 'back -t')
config.bind('tL', 'forward -t')
config.bind('tgu', 'navigate up -t')
config.bind('x', 'tab-close')  # in tiddlywiki it will close tiddlers rather than tabs
config.bind('s', 'spawn /home/boris/.local/share/qutebrowser/userscripts/NM_s_dispatcher.sh {url:host} {url:port}')  # special hinting for tiddlywiki
config.bind('<Alt-X>', 'tab-close')  # i'll try to use this instead
config.bind('<Alt-X>', 'tab-close', mode='insert')  # for insert mode compatibility (espetially on outo-insert on page start)
config.bind('X', 'tab-close -o')
config.bind('!x', 'tab-only')

# Downloads
config.bind('Du', 'download-cancel')
config.bind('D<Ctrl-R>', 'download-retry')
config.bind('Ddd', 'download-clear')
config.bind('DZQ', 'download-delete')
config.bind('DZZ', 'download-remove')
config.bind('DD', 'download-open')
config.bind('Dk', 'set downloads.position top')
config.bind('Dj', 'set downloads.position bottom')
config.bind('Dh', 'set downloads.position left')
config.bind('Dl', 'set downloads.position right')

config.bind(';k', 'hint alll delete')
config.bind(';a', 'hint alll')

config.bind('<Shift-Return>', 'hint-follow -s {hint-url}', mode='hint')

# Tiddlywiki
config.bind('<Alt+p>', 'hint sidebar-scrollable')
config.bind('r', 'hint edit-tiddler normal')
config.bind('<Ctrl-Return>', 'mode-leave ;; fake-key <Ctrl-Enter>', mode='insert')
config.bind('<Ctrl-C><Ctrl-J>', 'accept-changes_(tw)', mode='insert')
# NOTE the set input.spatial_navigation false here is *intensional*
c.aliases['accept-changes_(tw)'] = 'hint tiddler-title ;; later 40 fake-key <Ctrl-Enter> ;; set input.spatial_navigation false ;; later 80 mode-enter normal'
config.bind('<Ctrl-Escape>', 'fake-key <Ctrl-Escape> ;; mode-leave', mode='insert')
# NOTE the `set input.spatial_navigation false` in the two lines below is *intensional*
config.bind('<Escape>', 'mode-leave ;; set input.spatial_navigation false', mode='insert')
config.bind('<Ctrl-G>', 'mode-leave ;; set input.spatial_navigation false', mode='insert')
config.bind('<Escape>', 'clear-keychain ;; search ;; fullscreen --leave ;; fake-key --global _0_1', mode='normal') # Added a fake click on a dummy <div> (see 'dunder' bindings) to get rid of the fucking sticky dropdowns

config.bind('<Ctrl-Tab>', 'fake-key <Alt-Right>', mode='insert')
config.bind('<Ctrl-Shift-Tab>', 'fake-key <Alt-Left>', mode='insert')

config.bind('<Ctrl-C><Ctrl-V>', 'edit-text', mode='insert')

config.bind('tn', 'config-cycle -p input.spatial_navigation true false', mode='normal')
# config.bind('gg', 'run-with-count 500 scroll up')
# config.bind('G', 'run-with-count 500 scroll down')
config.bind('gg', 'scroll-to-perc 0')
config.bind('G', 'scroll-to-perc 100')

# This was an attempt to make qutebrowser automatically go to insert mode after hitting the 'edit tiddler button' (it can't do it normally because it
# can't recognize when javascript focuses elements). This workaroud involved two userscripts, one calling the other, and, while it is actually working,
# it's just too slow. Maybe I should try this workaround some time later, when i get myself an SSD - i suspect the slowness comes pretty much exclusively
# from the need to open the files!
#config.bind('r', 'spawn --userscript edit-tiddler-main.sh')
#config.bind('<Ctrl-R>', 'spawn --userscript edit-tiddler-main.sh')
#config.bind('<Ctrl-R>', 'spawn --userscript edit-tiddler-main.sh', mode='insert')

config.unbind('<Ctrl-V>')
config.bind('<Ctrl-Shift-V>', 'mode-enter passthrough')

config.bind('<Alt-m>', 'yank -s ;; spawn -d buku_run')

# Vim-like marks
# for symbol in en_symbols:
#     # config.bind('m' + symbol, 'set-mark ' + symbol)
#     config.bind("' " + symbol, 'jump-mark ' + symbol)

# config.bind('<Ctrl-G>', 'clear-keychain ;; search ;; fullscreen --leave ;; fake-key --global _0_1', mode='normal')
config.bind('<Ctrl-G>', 'clear-keychain ;; search ;; fullscreen --leave ;; fake-key --global _0_1', mode='normal')
config.bind('<Ctrl-G>', 'mode-leave', mode='caret')
config.bind('<Ctrl-G>', 'mode-leave', mode='command')
config.bind('<Ctrl-G>', 'mode-leave', mode='hint')
config.bind('<Ctrl-G>', 'mode-leave', mode='prompt')
config.bind('<Ctrl-G>', 'mode-leave', mode='register')
config.bind('<Ctrl-G>', 'mode-leave', mode='yesno')

# Evil-escape
config.bind('jk', 'mode-leave', mode='yesno')
config.bind('jk', 'mode-leave', mode='hint')

config.bind('<Ctrl-T>', 'fake-key <Ctrl-]>', mode='insert')  # 'tab'/indent (vim)
config.bind('<Ctrl-O>', 'fake-key <Return> ;; fake-key <Up> ;; fake-key <End>', mode='insert')
config.bind('<Ctrl-I>', 'fake-key <Tab>', mode='insert')  # tab (bash/ASCII ^I)
config.bind('<Ctrl-Alt-D>', 'fake-key <Shift-Tab>', mode='insert')  # 'de-tab'/dedent (vim)
config.bind('<Ctrl-D>', 'fake-key <Del>', mode='insert')
config.bind('<Alt-D>', 'fake-key <Ctrl-Del>', mode='insert')
config.bind('<Ctrl-F>', 'fake-key <Right>', mode='insert')
config.bind('<Ctrl-B>', 'fake-key <Left>', mode='insert')
config.bind('<Alt-F>', 'fake-key <Ctrl-Right>', mode='insert')
config.bind('<Alt-B>', 'fake-key <Ctrl-Left>', mode='insert')
config.bind('<Ctrl-K>', 'fake-key <Shift-End> ;; fake-key <Del>', mode='insert')  # kill line forward (emacs/bash)
config.bind('<Ctrl-/>', 'fake-key <Ctrl-Z> ;; fake-key <Left> ;; fake-key <Right>', mode='insert') # undo (bash)

config.bind('<Alt-W>', 'fake-key <Ctrl-Insert>', mode='insert')
config.bind('<Alt-Y>', 'fake-key <Shift-Insert>', mode='insert')

config.bind('<Alt-U>', 'fake-key <Shift-Home> ;; fake-key <Del> ;; fake-key <Backspace> ;; fake-key <Ctrl-[>', mode='insert')
config.bind('<Alt-O>', 'fake-key <End> ;; fake-key <Return>', mode='insert')

config.bind('<Alt-A>', 'fake-key <Ctrl-Home>', mode='insert')
config.bind('<Alt-E>', 'fake-key <Ctrl-End>', mode='insert')
config.bind('<Ctrl-Alt-A>', 'fake-key <Home>', mode='insert')
config.bind('<Ctrl-Alt-E>', 'fake-key <End>', mode='insert')

# Tab key replacement
config.bind('<Ctrl-I>', 'fake-key <Tab>', mode='normal')
config.bind('<Ctrl-Alt-I>', 'fake-key <Shift-Tab>', mode='normal')
config.bind('<Ctrl-Alt-I>', 'fake-key <Shift-Tab>', mode='insert')
config.bind('<Ctrl-I>', 'prompt-item-focus next', mode='prompt')
config.bind('<Ctrl-Alt-I>', 'prompt-item-focus prev', mode='prompt')
config.bind('<Ctrl-I>', 'completion-item-focus next', mode='command')
config.bind('<Ctrl-Alt-I>', 'completion-item-focus prev', mode='command')

config.bind('=', 'zoom-in', mode='normal')

config.bind('gh', 'tab-prev', mode='normal')
config.bind('gj', 'tab-next', mode='normal')
config.bind('gk', 'tab-prev', mode='normal')
config.bind('gl', 'tab-next', mode='normal')

config.bind('gh', 'tab-prev', mode='caret')
config.bind('gj', 'tab-next', mode='caret')
config.bind('gk', 'tab-prev', mode='caret')
config.bind('gl', 'tab-next', mode='caret')
config.bind('y', 'yank selection --keep', mode='caret')
config.bind('<Ctrl-Y>', 'yank selection', mode='caret')

config.bind('g1', 'tab-focus 1', mode='normal')
config.bind('g2', 'tab-focus 2', mode='normal')
config.bind('g3', 'tab-focus 3', mode='normal')
config.bind('g4', 'tab-focus 4', mode='normal')
config.bind('g5', 'tab-focus 5', mode='normal')
config.bind('g6', 'tab-focus 6', mode='normal')
config.bind('g7', 'tab-focus 7', mode='normal')
config.bind('g8', 'tab-focus 8', mode='normal')
config.bind('g9', 'tab-focus 9', mode='normal')
config.bind('g0', 'tab-focus -1', mode='normal')

config.set('tabs.close_mouse_button_on_bar', 'close-current')

config.bind('g.','set-cmd-text :')
config.bind('go','open -r -t ;; set-cmd-text :')

#config.bind('<Ctrl-T>', 'config-cycle completion.height 50% 25% 0%', mode='command')
#config.bind('<Ctrl-S>', 'config-cycle completion.shrink true false', mode='command')
config.bind('<Ctrl-S>5', 'height=50%', mode='command')
c.aliases['height=50%'] = 'set completion.height 50%'
config.bind('<Ctrl-S>2', 'height=20%', mode='command')
c.aliases['height=20%'] = 'set completion.height 20%'
config.bind('<Ctrl-S>0', 'height=0%', mode='command')
c.aliases['height=0%'] = 'set completion.height 0%'
config.bind('<Ctrl-S>s', 'shrink', mode='command')
c.aliases['shrink'] = 'config-cycle completion.shrink true false'

config.bind('<Ctrl-W>', 'rl-backward-kill-word', mode='command')
config.bind('<Ctrl-W>', 'rl-backward-kill-word ;; rl-backward-kill-word', mode='prompt')

# this is the difference between running a bash script just as a program (just spawn) vs running it as a userscript (spawn --userscript).
# in the latter case, qutebrowser prepares some environment variables and a FIFO.. in the specific case of tiddllywiki this results in
# a very irritating delay (probably because of the huge DOM, but who knows..). in the former case you of course lose the ability to easily
# access the FIFO (it sort of works anyway - but veeeery slow - god knows what happens under the hood) - but if you don't need it and/or
# don't need the whole DOM, you're better off using just spawn.. in this particular case I needed the script to command qutebrowser - but I
# got away with a hack using xdotool.. speed-wise it's waaay better.
# config.bind('<Space>','spawn --userscript selective-spacebar.sh')
config.bind(",",'spawn -d /home/boris/.local/share/qutebrowser/userscripts/NM_comma_dispatcher.sh {url:host} {url:port}')

# this is an (working) example of how you can make complex commands more readable
# config.bind('a', 'spawn\
#                   xdotool\
#                   type\
#                   _dtw')

config.bind('<Ctrl-S>', 'hint tiddlers-and-fields')

config.bind('<Ctrl-S>', 'hint tiddlers-and-fields', mode='insert')
config.bind('<Ctrl-C><Ctrl-X>', 'hint cancel-and-delete', mode='insert')
config.bind('<Ctrl-C>tp', 'toggle-preview_(tw)', mode='insert')  # tiddlywiki toggle preview
config.bind('<Ctrl-C>ft', 'file-tree_(tw)', mode='insert')
config.bind('<Ctrl-C>ts', 'toggle-sidebar_(tw)', mode='insert')  # tiddlywiki toggle sidebar
config.bind('<Ctrl-C>as', 'advanced-search_(tw)', mode='insert')
config.bind('<Ctrl-C>ss', 'sidebar-search_(tw)', mode='insert')
config.bind('<Ctrl-C>n', 'new-tiddler', mode='insert')
config.bind('<Ctrl-C>iu', 'insert-unicode_(tw)', mode='insert')
config.bind('<Ctrl-C>is', 'insert-snippet_(tw)', mode='insert')
config.bind('<Ctrl-C>ip', 'insert-picture_(tw)', mode='insert')
config.bind('<Ctrl-C>ii', 'insert-picture_(tw)', mode='insert')
config.bind('<Ctrl-C>il', 'insert-wikilink_(tw)', mode='insert')
config.bind('<Ctrl-C>it', 'insert-transclusion_(tw)', mode='insert')
config.bind('<Ctrl-C>im', 'insert-macro_(tw)', mode='insert')
config.bind('<Ctrl-C>e', 'excise_(tw)', mode='insert')
config.bind('<Ctrl-C>ch', 'codemirror-height_(tw)', mode='insert')
config.bind('<Ctrl-C>fw', 'fields-width_(tw)', mode='insert')
config.bind('<Ctrl-C>iu', 'insert-unicode_(tw)')  # this was commented out for some reason. comment it out again if you discover problems
config.bind('<Ctrl-C>is', 'insert-snippet_(tw)')  # this was commented out for some reason. comment it out again if you discover problems
config.bind('<Ctrl-C>ip', 'insert-picture_(tw)')  # this was commented out for some reason. comment it out again if you discover problems
config.bind('<Ctrl-C>ii', 'insert-picture_(tw)')  # this was commented out for some reason. comment it out again if you discover problems
config.bind('<Ctrl-C>il', 'insert-wikilink_(tw)')
config.bind('<Ctrl-C>it', 'insert-transclusion_(tw)')
config.bind('<Ctrl-C>im', 'insert-macro_(tw)')
##config.bind('<Ctrl-C>e', 'fake-key <Ctrl-E> ;; later 20 hint --rapid tw-editor-submenu')
##config.bind('<Ctrl-C>ch', 'hint --first tw-editor-height ;; later 50 hint --rapid tw-editor-submenu')
##config.bind('<Ctrl-C>fw', 'hint --first select')

# I have no clue now why I did these:
config.bind('<Ctrl-I>', 'fake-key <Down>', mode='hint')
config.bind('<Ctrl-Alt-I>', 'fake-key <Up>', mode='hint')
config.bind('<Tab>', 'fake-key <Down>', mode='hint')
config.bind('<Shift-Tab>', 'fake-key <Up>', mode='hint')
config.bind('<Ctrl-N>', 'fake-key <Down>', mode='hint')
config.bind('<Ctrl-P>', 'fake-key <Up>', mode='hint')
config.bind('<Ctrl-S>', 'mode-leave ;; hint tiddlers-and-fields', mode='hint')
config.bind('<Ctrl-C><Ctrl-X>', 'mode-leave ;; hint cancel-and-delete', mode='hint')

config.bind(',', 'mode-leave ;; spawn /home/boris/.local/share/qutebrowser/userscripts/NM_comma_dispatcher.sh {url:host} {url:port}', mode='hint')
config.bind('jt', "config-cycle colors.hints.bg 'qlineargradient(x1:0, y1:0, x2:0, y2:1, stop:0 rgba(255, 247, 133, 0.8), stop:1 rgba(255, 197, 66, 0.8))' 'qlineargradient(x1:0, y1:0, x2:0, y2:1, stop:0 rgba(255, 247, 133, 0.2), stop:1 rgba(255, 197, 66, 0.2))' ;; config-cycle colors.hints.fg black 'rgba(0, 0, 0, 0.2)", mode='hint')

config.bind('<Space><Space>', 'space')
c.aliases['space'] = 'fake-key <Space>'

#config.bind('m', 'fake-key <Ctrl-[> ;; fake-key --global <Escape> ;; fake-key --global <Escape> ;; later 50 hint --first codemirror ;; later 200 mode-enter insert')
config.bind('ge', 'fake-key <Ctrl-[> ;; fake-key --global <Escape> ;; fake-key --global <Escape> ;; later 50 hint --first codemirror ;; later 200 mode-enter insert')

config.unbind('wi')
config.bind('wi', 'fake-key --global _c010 ;; fake-key --global _c011')

# smacemacs-style bindings
config.bind('<Space>bb', 'list_tabs')
c.aliases['list_tabs'] = 'set-cmd-text -s :tab-select'
config.bind('<Space>01', 'tab-focus 1')
config.bind('<Space>q', 'tab-focus 1')
config.bind('<Space>02', 'tab-focus 2')
config.bind('<Space>3', 'tab-focus 3')
config.bind('<Space>4', 'tab-focus 4')
config.bind('<Space>5', 'tab-focus 5')
config.bind('<Space>6', 'tab-focus 6')
config.bind('<Space>7', 'tab-focus 7')
config.bind('<Space>8', 'tab-focus 8')
config.bind('<Space>9', 'tab-focus 9')
config.bind('<Space>10', 'tab-focus 10')
config.bind('<Space>11', 'tab-focus 11')
config.bind('<Space>12', 'tab-focus 12')
config.bind('<Space>13', 'tab-focus 13')
config.bind('<Space>14', 'tab-focus 14')
config.bind('<Space>15', 'tab-focus 15')
config.bind('<Space>16', 'tab-focus 16')
config.bind('<Space>17', 'tab-focus 17')
config.bind('<Space>18', 'tab-focus 18')
config.bind('<Space>19', 'tab-focus 19')
config.bind('<Space>20', 'tab-focus 20')
config.bind('<Space>21', 'tab-focus 21')
config.bind('<Space>22', 'tab-focus 22')
config.bind('<Space>23', 'tab-focus 23')
config.bind('<Space>24', 'tab-focus 24')
config.bind('<Space>25', 'tab-focus 25')
config.bind('<Space>26', 'tab-focus 26')
config.bind('<Space>27', 'tab-focus 27')
config.bind('<Space>28', 'tab-focus 28')
config.bind('<Space>29', 'tab-focus 29')
config.bind('<Space>$', 'tab-focus -1')
config.bind('<Space>-1', 'tab-focus -1')
config.bind('<Space>-2', 'tab-focus -2')
config.bind('<Space>-3', 'tab-focus -3')
config.bind('<Space>-4', 'tab-focus -4')
config.bind('<Space>-5', 'tab-focus -5')
config.bind('<Space>-6', 'tab-focus -6')
config.bind('<Space>-7', 'tab-focus -7')
config.bind('<Space>-8', 'tab-focus -8')
config.bind('<Space>-9', 'tab-focus -9')
c.aliases['last_tab'] = 'tab-focus last'
config.bind('<Space><Tab>', 'last_tab')
config.bind('<Space><Ctrl-I>', 'last_tab')
config.bind('<Space>fed', 'config-edit')
config.bind('<Space>fe<Shift-R>', 'config-source')
c.keyhint.blacklist.append('<Space>-*')
c.keyhint.blacklist.append('<Space>0*')
c.keyhint.blacklist.append('<Space>1*')
c.keyhint.blacklist.append('<Space>2*')
c.keyhint.blacklist.append('<Space>3')
c.keyhint.blacklist.append('<Space>4')
c.keyhint.blacklist.append('<Space>5')
c.keyhint.blacklist.append('<Space>6')
c.keyhint.blacklist.append('<Space>7')
c.keyhint.blacklist.append('<Space>8')
c.keyhint.blacklist.append('<Space>9')
c.keyhint.blacklist.append('<Space>$')
c.keyhint.blacklist.append('<Space>q')
c.keyhint.blacklist.append('<Space>-*')

c.fonts.default_size = '13pt'
c.zoom.default = '130%'
c.fonts.hints = 'bold 15pt default_family'
c.content.pdfjs = False
c.keyhint.radius = 0
c.fonts.keyhint = 'bold default_size default_family'
c.hints.radius = 0

# c.colors.tabs.selected.even.bg = 'grey'
# c.colors.tabs.selected.odd.bg = 'grey'
# c.colors.tabs.odd.bg = 'black'
# c.colors.tabs.even.bg = 'darkgrey'

# Youtube ad blocking

def filter_yt(info: interceptor.Request):
    """Block the given request if necessary."""
    url = info.request_url
    if (
        url.host() == "www.youtube.com"
        and url.path() == "/get_video_info"
        and "&adformat=" in url.query()
    ):
        info.block()

interceptor.register(filter_yt)

# c.hints.mode = 'letter'
c.window.title_format = "{id}{title_sep}{perc}{current_title}{title_sep}qutebrowser"
c.content.notifications = False # globally turn off notifications, hoping that it will fix the service worker problem

c.fileselect.handler = 'external'
c.fileselect.multiple_files.command = ["/home/boris/kitty/kitty/launcher/kitty", "--class", "Gvim", "-e", "ranger", "--choosefile={}"]
c.fileselect.single_file.command = ["/home/boris/kitty/kitty/launcher/kitty", "--class", "Gvim", "-e", "ranger", "--choosefile={}"]

c.aliases['launch_tiddlywiki'] = 'spawn -d qutebrowser --basedir /home/boris/qutebrowser-profiles/tiddlywiki/ --qt-arg name tiddlywiki'
c.aliases['launch_tiddlywiki_respecting_current_layout'] = 'fake-key --global _c010 ;; fake-key --global _c012'
config.bind('<Space>wt', 'launch_tiddlywiki')
config.bind('<Space>wlt', 'launch_tiddlywiki_respecting_current_layout')
c.aliases['launch_youtube'] = 'spawn -d qutebrowser --basedir /home/boris/qutebrowser-profiles/youtube/ --qt-arg name mpv'
config.bind('<Space>wy', 'launch_youtube')
