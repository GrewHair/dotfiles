# flake8: noqa

# Autogenerated config.py
#
# NOTE: config.py is intended for advanced users who are comfortable
# with manually migrating the config file on qutebrowser upgrades. If
# you prefer, you can also configure qutebrowser using the
# :set/:bind/:config-* commands without having to write a config.py
# file.
#
# Documentation:
#   qute://help/configuring.html
#   qute://help/settings.html

# Uncomment this to still load settings configured via autoconfig.yml
# config.load_autoconfig()

# Which cookies to accept. With QtWebEngine, this setting also controls
# other features with tracking capabilities similar to those of cookies;
# including IndexedDB, DOM storage, filesystem API, service workers, and
# AppCache. Note that with QtWebKit, only `all` and `never` are
# supported as per-domain values. Setting `no-3rdparty` or `no-
# unknown-3rdparty` per-domain on QtWebKit will have the same effect as
# `all`. If this setting is used with URL patterns, the pattern gets
# applied to the origin/first party URL of the page making the request,
# not the request URL.
# Type: String
# Valid values:
#   - all: Accept all cookies.
#   - no-3rdparty: Accept cookies from the same origin only. This is known to break some sites, such as GMail.
#   - no-unknown-3rdparty: Accept cookies from the same origin only, unless a cookie is already set for the domain. On QtWebEngine, this is the same as no-3rdparty.
#   - never: Don't accept cookies at all.
config.set('content.cookies.accept', 'all', 'chrome-devtools://*')

# Which cookies to accept. With QtWebEngine, this setting also controls
# other features with tracking capabilities similar to those of cookies;
# including IndexedDB, DOM storage, filesystem API, service workers, and
# AppCache. Note that with QtWebKit, only `all` and `never` are
# supported as per-domain values. Setting `no-3rdparty` or `no-
# unknown-3rdparty` per-domain on QtWebKit will have the same effect as
# `all`. If this setting is used with URL patterns, the pattern gets
# applied to the origin/first party URL of the page making the request,
# not the request URL.
# Type: String
# Valid values:
#   - all: Accept all cookies.
#   - no-3rdparty: Accept cookies from the same origin only. This is known to break some sites, such as GMail.
#   - no-unknown-3rdparty: Accept cookies from the same origin only, unless a cookie is already set for the domain. On QtWebEngine, this is the same as no-3rdparty.
#   - never: Don't accept cookies at all.
config.set('content.cookies.accept', 'all', 'devtools://*')

# User agent to send.  The following placeholders are defined:  *
# `{os_info}`: Something like "X11; Linux x86_64". * `{webkit_version}`:
# The underlying WebKit version (set to a fixed value   with
# QtWebEngine). * `{qt_key}`: "Qt" for QtWebKit, "QtWebEngine" for
# QtWebEngine. * `{qt_version}`: The underlying Qt version. *
# `{upstream_browser_key}`: "Version" for QtWebKit, "Chrome" for
# QtWebEngine. * `{upstream_browser_version}`: The corresponding
# Safari/Chrome version. * `{qutebrowser_version}`: The currently
# running qutebrowser version.  The default value is equal to the
# unchanged user agent of QtWebKit/QtWebEngine.  Note that the value
# read from JavaScript is always the global value. With QtWebEngine
# between 5.12 and 5.14 (inclusive), changing the value exposed to
# JavaScript requires a restart.
# Type: FormatString
config.set('content.headers.user_agent', 'Mozilla/5.0 ({os_info}) AppleWebKit/{webkit_version} (KHTML, like Gecko) {upstream_browser_key}/{upstream_browser_version} Safari/{webkit_version}', 'https://web.whatsapp.com/')

# User agent to send.  The following placeholders are defined:  *
# `{os_info}`: Something like "X11; Linux x86_64". * `{webkit_version}`:
# The underlying WebKit version (set to a fixed value   with
# QtWebEngine). * `{qt_key}`: "Qt" for QtWebKit, "QtWebEngine" for
# QtWebEngine. * `{qt_version}`: The underlying Qt version. *
# `{upstream_browser_key}`: "Version" for QtWebKit, "Chrome" for
# QtWebEngine. * `{upstream_browser_version}`: The corresponding
# Safari/Chrome version. * `{qutebrowser_version}`: The currently
# running qutebrowser version.  The default value is equal to the
# unchanged user agent of QtWebKit/QtWebEngine.  Note that the value
# read from JavaScript is always the global value. With QtWebEngine
# between 5.12 and 5.14 (inclusive), changing the value exposed to
# JavaScript requires a restart.
# Type: FormatString
config.set('content.headers.user_agent', 'Mozilla/5.0 ({os_info}) AppleWebKit/{webkit_version} (KHTML, like Gecko) {upstream_browser_key}/{upstream_browser_version} Safari/{webkit_version} Edg/{upstream_browser_version}', 'https://accounts.google.com/*')

# User agent to send.  The following placeholders are defined:  *
# `{os_info}`: Something like "X11; Linux x86_64". * `{webkit_version}`:
# The underlying WebKit version (set to a fixed value   with
# QtWebEngine). * `{qt_key}`: "Qt" for QtWebKit, "QtWebEngine" for
# QtWebEngine. * `{qt_version}`: The underlying Qt version. *
# `{upstream_browser_key}`: "Version" for QtWebKit, "Chrome" for
# QtWebEngine. * `{upstream_browser_version}`: The corresponding
# Safari/Chrome version. * `{qutebrowser_version}`: The currently
# running qutebrowser version.  The default value is equal to the
# unchanged user agent of QtWebKit/QtWebEngine.  Note that the value
# read from JavaScript is always the global value. With QtWebEngine
# between 5.12 and 5.14 (inclusive), changing the value exposed to
# JavaScript requires a restart.
# Type: FormatString
config.set('content.headers.user_agent', 'Mozilla/5.0 ({os_info}) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99 Safari/537.36', 'https://*.slack.com/*')

# User agent to send.  The following placeholders are defined:  *
# `{os_info}`: Something like "X11; Linux x86_64". * `{webkit_version}`:
# The underlying WebKit version (set to a fixed value   with
# QtWebEngine). * `{qt_key}`: "Qt" for QtWebKit, "QtWebEngine" for
# QtWebEngine. * `{qt_version}`: The underlying Qt version. *
# `{upstream_browser_key}`: "Version" for QtWebKit, "Chrome" for
# QtWebEngine. * `{upstream_browser_version}`: The corresponding
# Safari/Chrome version. * `{qutebrowser_version}`: The currently
# running qutebrowser version.  The default value is equal to the
# unchanged user agent of QtWebKit/QtWebEngine.  Note that the value
# read from JavaScript is always the global value. With QtWebEngine
# between 5.12 and 5.14 (inclusive), changing the value exposed to
# JavaScript requires a restart.
# Type: FormatString
config.set('content.headers.user_agent', 'Mozilla/5.0 ({os_info}; rv:71.0) Gecko/20100101 Firefox/71.0', 'https://docs.google.com/*')

# User agent to send.  The following placeholders are defined:  *
# `{os_info}`: Something like "X11; Linux x86_64". * `{webkit_version}`:
# The underlying WebKit version (set to a fixed value   with
# QtWebEngine). * `{qt_key}`: "Qt" for QtWebKit, "QtWebEngine" for
# QtWebEngine. * `{qt_version}`: The underlying Qt version. *
# `{upstream_browser_key}`: "Version" for QtWebKit, "Chrome" for
# QtWebEngine. * `{upstream_browser_version}`: The corresponding
# Safari/Chrome version. * `{qutebrowser_version}`: The currently
# running qutebrowser version.  The default value is equal to the
# unchanged user agent of QtWebKit/QtWebEngine.  Note that the value
# read from JavaScript is always the global value. With QtWebEngine
# between 5.12 and 5.14 (inclusive), changing the value exposed to
# JavaScript requires a restart.
# Type: FormatString
config.set('content.headers.user_agent', 'Mozilla/5.0 ({os_info}; rv:71.0) Gecko/20100101 Firefox/71.0', 'https://drive.google.com/*')

# Load images automatically in web pages.
# Type: Bool
config.set('content.images', True, 'chrome-devtools://*')

# Load images automatically in web pages.
# Type: Bool
config.set('content.images', True, 'devtools://*')

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'chrome-devtools://*')

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'devtools://*')

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'chrome://*/*')

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'qute://*/*')

# Switch to insert mode when clicking flash and other plugins.
# Type: Bool
c.input.insert_mode.plugins = True

# === My Configs ===


## Unbind stuff in normal mode
config.unbind('<Ctrl-t>')
config.unbind('<Ctrl-n>')
config.unbind('<Ctrl-Shift-n>')
config.unbind('<Ctrl-w>')
config.unbind('<Ctrl-Shift-w>')
config.unbind('<Ctrl-PgDown>')
config.unbind('<Ctrl-PgUp>')
config.unbind('<F5>')
config.unbind('<Ctrl-F5>')
config.unbind('<Back>')
config.unbind('<Forward>')
config.unbind('<F11>')
config.unbind('<Ctrl-Shift-t>')
config.unbind('<Ctrl-Shift-Tab>')
config.unbind('<Ctrl-^>')
config.unbind('<Alt+1>')
config.unbind('<Alt+2>')
config.unbind('<Alt+3>')
config.unbind('<Alt+4>')
config.unbind('<Alt+5>')
config.unbind('<Alt+6>')
config.unbind('<Alt+7>')
config.unbind('<Alt+8>')
config.unbind('<Alt+9>')
config.unbind('<Ctrl-h>')
config.unbind('<Ctrl-s>')
config.unbind('<Ctrl-Alt-p>')
config.unbind('<Ctrl-p>')
config.unbind('<Ctrl-Q>') # :q should be enough
config.unbind('ad') # download cancel
config.unbind('cd') # download clear
config.unbind('g$') # tab-focus -1 (<Ctrl-0> should be enough)
config.unbind('g0') # tab-focus 1 (<Ctrl-1> should be enough)
config.unbind('g^') # tab-focus 1 (<Ctrl-1> should be enough)
config.unbind('ga') # open -t (O + <Enter> should be enough)
config.unbind('gb') # bookmark-load (i'll deal with bookmarks later when i install buku)  !!!!!!!!!
config.unbind('gB') # bookmark-load -t (i'll deal with bookmarks later when i install buku)  !!!!!!!!
config.unbind('gC') # tab-clone
config.unbind('gd') # download
config.unbind('gD') # tab-give
config.unbind('gf') # view source (i don't know what to do with it yet) !!!!!! ALERT!!!!!
config.unbind('gl') # tab-move -
config.unbind('gm') # tab-move
config.unbind('gO') # set-cmd-text :open -t -r {url:pretty}
config.unbind('go') # set-cmd-text :open {url:pretty}
config.unbind('gr') # tab-move +
config.unbind('gt') # set-cmd-text -s :buffer
config.unbind('gU') # navigate up -t
config.unbind('co') # tab-only
config.unbind('J')
config.unbind('K')
config.unbind('r') # Prevent accidental reloads
config.unbind('R') # Prevent accidental reloads
config.unbind('xo') # set-cmd-text -s :open -b
config.unbind('xO') # set-cmd-text :open -b -r {url:pretty}
config.unbind('d') # tab-close
config.unbind('D') # tab-close -o
config.unbind('th') # back -t
config.unbind('tl') # forward -t
config.unbind('o') # open
config.unbind('O') # open -t
config.unbind('wh') # back -w
config.unbind('wl') # forward -w
config.unbind('.') # repeat last action (it may be problematic with russian layout
c.bindings.key_mappings = {} # Unmap <Ctrl-[> so codemirror can use it

# Make normal mode language agnostic
en_symbols = list("qwertyuiop[]asdfghjkl;'zxcvbnm,.QWERTYUIOP{}ASDFGHJKL:\"ZXCVBNM<>")
ru_symbols = list("йцукенгшщзхъфывапролджэячсмитьбюЙЦУКЕНГШЩЗХЪФЫВАПРОЛДЖЭЯЧСМИТЬБЮ")
c.bindings.key_mappings = dict(zip(ru_symbols, en_symbols))
for i in range(32):
    c.bindings.key_mappings['<Alt-' + ru_symbols[i] + '>'] = '<Alt-' + en_symbols[i] + '>'

# The "dunder" bindings

# Merge windows
config.bind('__', 'set-cmd-text -s :tab-take ;; later 10 fake-key --global <Tab> ;; later 10 fake-key --global <Return>') 

# Create a <div id="0">
config.bind('_0', 'jseval -q tmp=document.createElement("div");document.body.appendChild(tmp);tmp.setAttribute("id", "0");')

# Click this div
config.bind('_1', 'click-element id 0 ;; jseval -q document.getElementById("0").remove();')

# Click this div a few ms later
config.bind('_2', 'later 30 click-element id 0')

# Domain keychains: TiddlyWiki (prefix _dtw, where _ = dunder, d = domain, tw = tiddlywiki )
config.bind('_dtwft', 'fake-key <Ctrl-]>')

# Aliases
c.aliases['yt-hide'] = 'jseval document.querySelector("#container.style-scope.ytd-masthead").style.display="none";'
c.aliases['yt-show'] = 'jseval document.querySelector("#container.style-scope.ytd-masthead").style.display="block";'
c.aliases['stylesheets-on'] = 'set content.user_stylesheets "~/.local/share/qutebrowser/stylesheets/solarized-everything-css/css/gruvbox/gruvbox-all-sites.css"'
c.aliases['stylesheets-off'] = 'set content.user_stylesheets ""'
c.aliases['merge-windows'] = 'fake-key --global _0_0_0_0'
c.aliases['noh'] = 'search'
c.aliases['bindings'] = 'open qute://bindings/'
c.aliases['bookmarks'] = 'open qute://bookmarks/'
c.aliases['version'] = 'open qute://version/'

# Add search engines
c.url.searchengines['google'] = "https://www.google.com/search?q={}"
c.url.searchengines['youtube'] = "https://www.youtube.com/search?q={}"
c.url.searchengines['reddit'] = "https://www.reddit.com/search?q={}"
c.url.searchengines['stackoverflow'] = "https://www.stackoverflow.com/search?q={}"
c.url.searchengines['math.stackexchange'] = "https://math.stackexchange.com/search?q={}"
c.url.searchengines['askubuntu'] = "https://askubuntu.com/search?q={}"
c.url.searchengines['wikipedia'] = "https://wikipedia.org/wiki/{}"
c.url.searchengines['emuparadise'] = "https://www.emuparadise.me/roms/search.php?query={}"
c.url.searchengines['python.org'] = "https://www.python.org/search/?q={}"
c.url.searchengines['greasespot'] = "https://wiki.greasespot.net/index.php?title=Special%3ASearch&search={}&go=Go"
c.url.searchengines['greasyfork'] = "https://greasyfork.org/en/scripts?q={}"
c.url.searchengines['openuserjs'] = "https://openuserjs.org/?q={}"
c.url.searchengines['svg-wikimedia'] = "https://commons.wikimedia.org/w/index.php?sort=relevance&search={}+filemime%3Aimage%2Fsvg%2Bxml&title=Special:Search&profile=advanced&fulltext=1&advancedSearch-current=%7B%22fields%22%3A%7B%22filetype%22%3A%22image%2Fsvg%2Bxml%22%7D%7D&ns0=1&ns1=1&ns2=1&ns3=1&ns4=1&ns5=1&ns6=1&ns7=1&ns8=1&ns9=1&ns10=1&ns11=1&ns12=1&ns13=1&ns14=1&ns15=1&ns100=1&ns101=1&ns102=1&ns103=1&ns104=1&ns105=1&ns106=1&ns107=1&ns460=1&ns461=1&ns486=1&ns487=1&ns490=1&ns491=1&ns828=1&ns829=1&ns1198=1&ns1199=1&ns2300=1&ns2301=1&ns2302=1&ns2303=1"
c.url.searchengines['github'] = "https://github.com/search?q={}"
c.url.searchengines['translate:ru-to-en'] = "https://translate.google.com/#view=home&op=translate&sl=ru&tl=en&text={}"
c.url.searchengines['translate:en-to-ru'] = "https://translate.google.com/#view=home&op=translate&sl=en&tl=ru&text={}"

# Characters used for hint strings
#c.hints.chars 'asdfghjkl'
#c.hints.chars = "asdfghl;qwertuiop[xcvnm,./"
#c.hints.chars = "sdfghlwertuioxcvnm,.249"
c.hints.chars = "sfgwrtuiocvnm,.23489"

# Add hints selectors
c.hints.selectors['paragraphs'] = ['div, span, p, ol, ul, h1, h2, h3, h4, h5, h6']
c.hints.selectors['alll'] = ['*']
c.hints.selectors['yt'] = ['yt-formatted-string']
c.hints.selectors['yt-video'] = ['video']
c.hints.selectors['all'].append('yt-formatted-string')
c.hints.selectors['tables'] = ['table']
c.hints.selectors['pre'] = ['pre']
c.hints.selectors['foo'] = ['.tc-block-dropdown']
c.hints.selectors['sidebar'] = ['.tc-sidebar-tabs-main > .tc-tab-selected']
c.hints.selectors['title'] = ['.tc-site-title']
#c.hints.selectors['edit-tiddler'] = ['button[title="Edit this tiddler"], textarea, .tc-drafts-list>a, input[placeholder="tag name"], input[placeholder="field name"], input[placeholder="field value"], input.tc-titlebar']
#c.hints.selectors['edit-tiddler'] = ['.tc-image-edit-button, textarea, input[placeholder="tag name"], input[placeholder="field name"], input[placeholder="field value"], input.tc-titlebar']
c.hints.selectors['edit-tiddler'] = ['.tc-image-edit-button, .tc-image-close-button, .tc-edit-texteditor, .CodeMirror-lines, .tc-tab-buttons>button, .tc-tag-label, input[placeholder="field value"]']
c.hints.selectors['tw-snippet'] = ['button[title="Insert a preconfigured snippet of text - [ctrl-S]"]']
c.hints.selectors['tw-editor-height'] = ['button[title="Choose the height of the text editor"]']
#c.hints.selectors['sidebar-tabs-main'] = ['.tc-tab-set .tc-sidebar-tabs-main .tc-vertical']
#c.hints.selectors['sidebar-tabs-main'] = ['.tc-tab-content .tc-vertical']
c.hints.selectors['sidebar-scrollable'] = ['.tc-sidebar-scrollable']
c.hints.selectors['codemirror'] = ['.tc-image-edit-button, .CodeMirror-lines']
c.hints.selectors['tiddler-add-tag'] = ['input[placeholder="tag name"]']
c.hints.selectors['tiddler-add-field'] = ['input[placeholder="field name"]']
c.hints.selectors['tiddler-title'] = ['input.tc-titlebar']
c.hints.selectors['tiddlers-and-fields'] = ['.tc-image-edit-button, input[placeholder="field value"], .CodeMirror-lines']
c.hints.selectors['cancel-and-delete'] = ['.tc-image-cancel-button, .tc-image-close-button, button[title="Remove field"]']
c.hints.selectors['radio-unchecked'] = ['svg']
c.hints.selectors['folder'] = ['svg.tc-image-folder']

# Enable Dark Mode
#c.colors.webpage.darkmode.enabled = True
#config.set('colors.webpage.darkmode.enabled', True, 'https://github.com')
#c.colors.webpage.darkmode.algorithm = 'brightness-rgb'
#c.colors.webpage.darkmode.policy.images = 'smart'
#c.colors.webpage.darkmode.threshold.text = 150 # 256 = invert all
#c.colors.webpage.darkmode.threshold.background = 205 # 0 = invert all

#c.content.user_stylesheets = '~/.local/share/qutebrowser/stylesheets/solarized-everything-css/css/gruvbox/gruvbox-all-sites.css'
#c.content.user_stylesheets = '~/.local/share/qutebrowser/stylesheets/solarized-everything-css/css/darculized/darculized-all-sites.css'
#c.content.user_stylesheets = '~/.local/share/qutebrowser/stylesheets/qutebrowser_dark_solarized/solarized-dark.css'

#c.colors.webpage.prefers_color_scheme_dark = True

# Open base URL of a search engine if no search terms
c.url.open_base_url = True

# Insert mode on sites load
# c.input.insert_mode.auto_load = True
c.input.insert_mode.auto_load = False

# Restore mode on tab change
config.set('tabs.mode_on_change', 'restore')

# Close window when the last tab is closed
config.set('tabs.last_close', 'close')

# Messages timeout
c.messages.timeout = 3000

# Downloads position
config.set('downloads.position', 'bottom')

# Tabs max width
config.set('tabs.max_width', 200)

# Hints auto-follow
c.hints.auto_follow = 'always'

# Forbid autoplay
c.content.autoplay = False

# Keyhint delay
# c.keyhint.delay = 300
c.keyhint.delay = 0

# Uppercase for hints
c.hints.uppercase = True

# config.bind(';s', 'hint paragraphs userscript tts.py')
config.bind(';s', 'hint paragraphs userscript mimic.sh')

config.bind(';p', 'hint pre userscript yank-pre.sh')

config.bind('..', 'repeat-command')

config.bind(';m', 'hint links spawn -d mpv --x11-name="large" {hint-url}')
config.bind(';v', 'hint links spawn -d vivaldi --class="large" {hint-url}')
config.bind(';P', 'spawn youtube-dl -o "/media/boris/d/Smth/%(title)s-%(id)s.%(ext)s" {url}')
config.bind(';V', 'spawn -d vivaldi --class="large" {url}')
config.bind(';M', 'spawn -d mpv --x11-name="large" {url}')

config.bind('o', 'set-cmd-text -s :open -r -t')
config.bind('O', 'set-cmd-text -s :open -r -b')
config.bind('cc', 'set-cmd-text -s :open')
config.bind('A', 'set-cmd-text -s :open -b')
config.bind('$', 'set-cmd-text -s :open -t')

config.bind('cu', 'edit-url')
config.bind('c.', 'config-edit')

config.bind('wH', 'back -w')
config.bind('wL', 'forward -w')
config.bind('wgu', 'navigate up -w')

# Insert mode page navigation
config.bind('<Ctrl-E>', 'scroll-page 0 0.05', mode='insert')
config.bind('<Ctrl-Y>', 'scroll-page 0 -0.05', mode='insert')
config.bind('<Ctrl-P>', 'fake-key <Up>', mode='insert')
config.bind('<Ctrl-N>', 'fake-key <Down>', mode='insert')
config.bind('<Ctrl-P>', 'fake-key <Up>', mode='normal')  # for normal mode compatibility
config.bind('<Ctrl-N>', 'fake-key <Down>', mode='normal')  # for normale mode compatibility
config.bind('<Ctrl-H>', 'fake-key <Backspace>', mode='insert')
config.bind('<Ctrl-W>', 'fake-key <Ctrl-Backspace>', mode='insert')
config.bind('<Ctrl-U>', 'fake-key <Shift-Home> ;; fake-key <Backspace>', mode='insert')

# Caret mode page navigation
config.bind('d', 'scroll-page 0 0.1', mode='caret')
config.bind('e', 'scroll-page 0 -0.1', mode='caret')
config.bind('<Ctrl-F>', 'scroll-page 0 1', mode='caret')
config.bind('<Ctrl-B>', 'scroll-page 0 -1', mode='caret')
config.bind('<Ctrl-D>', 'scroll-page 0 0.5', mode='caret')
config.bind('<Ctrl-U>', 'scroll-page 0 -0.5', mode='caret')
config.bind('<Ctrl-E>', 'scroll-page 0 0.05', mode='caret')
config.bind('<Ctrl-Y>', 'scroll-page 0 -0.05', mode='caret')

# Prompt mode page navigation
config.bind('<Ctrl-F>', 'scroll-page 0 1', mode='prompt')
config.bind('<Ctrl-B>', 'scroll-page 0 -1', mode='prompt')
config.bind('<Ctrl-D>', 'scroll-page 0 0.5', mode='prompt')
config.bind('<Ctrl-U>', 'scroll-page 0 -0.5', mode='prompt')
config.bind('<Ctrl-E>', 'scroll-page 0 0.05', mode='prompt')
config.bind('<Ctrl-Y>', 'scroll-page 0 -0.05', mode='prompt')

# Normal mode page navigation
config.bind('<Ctrl-E>', 'scroll-page 0 0.05')
config.bind('<Ctrl-Y>', 'scroll-page 0 -0.05')
config.bind('d', 'scroll-page 0 0.1')
config.bind('e', 'scroll-page 0 -0.1')

# <Return> aliases
config.bind('<Ctrl-J>', 'command-accept', mode='command')
config.bind('<Ctrl-M>', 'command-accept', mode='command')
config.bind('<Ctrl-J>', 'fake-key <Return>', mode='insert')
config.bind('<Ctrl-M>', 'fake-key <Return>', mode='insert')
config.bind('<Ctrl-M>', 'follow-selected', mode='normal')
config.bind('<Ctrl-J>', 'prompt-accept', mode='prompt')
config.bind('<Ctrl-M>', 'prompt-accept', mode='prompt')

# Tab switching
config.bind('<Ctrl-.>', 'tab-move +')
config.bind('<Ctrl-,>', 'tab-move -')
config.bind('<Ctrl-.>', 'tab-move +', mode='insert')
config.bind('<Ctrl-,>', 'tab-move -', mode='insert')
config.bind('<Ctrl-.>', 'tab-move +', mode='prompt')
config.bind('<Ctrl-,>', 'tab-move -', mode='prompt')

config.bind('<Alt-J>', 'tab-next', mode='normal')
config.bind('<Alt-K>', 'tab-prev', mode='normal')
config.bind('<Alt-H>', 'tab-prev', mode='normal')
config.bind('<Alt-L>', 'tab-next', mode='normal')
config.bind('<Alt-J>', 'tab-next', mode='insert')
config.bind('<Alt-K>', 'tab-prev', mode='insert')
config.bind('<Alt-H>', 'tab-prev', mode='insert')
config.bind('<Alt-L>', 'tab-next', mode='insert')
config.bind('<Alt-K>', 'tab-prev', mode='prompt')
config.bind('<Alt-L>', 'tab-next', mode='prompt')

for key_no in range(10):
    for mode in ['normal', 'insert', 'prompt']:
        tab_to_focus = " " + str(key_no) if key_no != 0 else " -1"
        tab_to_move = " " + str(key_no) if key_no != 0 else ""
        key_to_focus = '<Ctrl-{}>'.format(key_no)
        key_to_move = '<Alt-{}>'.format(key_no)
        command_to_focus = 'tab-focus{}'.format(tab_to_focus)
        command_to_move = 'tab-move{}'.format(tab_to_move)
        config.bind(key_to_focus, command_to_focus, mode=mode)
        config.bind(key_to_move, command_to_move, mode=mode)


# Tabs
config.bind('>', 'tab-move +')
config.bind('<<', 'tab-move -')
config.bind('><', 'tab-move')
config.bind('tG', 'set-cmd-text -s :tab-give')
config.bind('tT', 'set-cmd-text -s :tab-take')
config.bind('t/', 'set-cmd-text -s :buffer')
config.bind('typ', 'tab-clone')
config.bind('tk', 'set tabs.position top')
config.bind('tj', 'set tabs.position bottom')
config.bind('th', 'set tabs.position left')
config.bind('tl', 'set tabs.position right')
config.bind('tt', 'config-cycle -p tabs.show always switching')
config.bind('tw', 'open -r -t http://127.0.0.1:8081/')
config.bind('t--', 'set-cmd-text -s :set tabs.width')
config.bind('tH', 'back -t')
config.bind('tL', 'forward -t')
config.bind('tgu', 'navigate up -t')
config.bind('x', 'spawn --userscript selective-x.sh')  # it crashes tiddlywiki all the time (so instead of binding directly, i made a script with a simple if statement)
config.bind('<Alt-X>', 'tab-close')  # i'll try to use this instead
config.bind('<Alt-X>', 'tab-close', mode='insert')  # for insert mode compatibility (espetially on outo-insert on page start)
config.bind('X', 'tab-close -o')
config.bind('!x', 'tab-only')

# Downloads
config.bind('Du', 'download-cancel')
config.bind('D<Ctrl-R>', 'download-retry')
config.bind('Ddd', 'download-clear')
config.bind('DZQ', 'download-delete')
config.bind('DZZ', 'download-remove')
config.bind('DD', 'download-open')
config.bind('Dk', 'set downloads.position top')
config.bind('Dj', 'set downloads.position bottom')
config.bind('Dh', 'set downloads.position left')
config.bind('Dl', 'set downloads.position right')

config.bind(';k', 'hint alll delete')
config.bind(';a', 'hint alll')

config.bind('<Shift-Return>', 'follow-hint -s {hint-url}', mode='hint')

# Tiddlywiki
#config.bind('r', 'hint edit-tiddler normal ;; enter-mode insert ;; set input.spatial_navigation true')
#config.bind('R', 'hint sidebar-scrollable')  # i desided to ditch this in favour of the following (to try to be consistent with the current mapping in Atom):
config.bind('<Alt+p>', 'hint sidebar-scrollable')
config.bind('r', 'hint edit-tiddler normal ;; set input.spatial_navigation true')
config.bind('<Alt-R>', 'hint edit-tiddler normal ;; set input.spatial_navigation true')
config.bind('<Alt-R>', 'hint edit-tiddler normal ;; set input.spatial_navigation true', mode='insert')
config.bind('<Ctrl-Return>', 'leave-mode ;; fake-key <Ctrl-Enter> ;; set input.spatial_navigation false', mode='insert')
config.bind('<Ctrl-Escape>', 'fake-key <Ctrl-Escape> ;; leave-mode ;; set input.spatial_navigation false', mode='insert')
config.bind('<Escape>', 'leave-mode ;; set input.spatial_navigation false', mode='insert') # Unfocus the page on leave-mode to prevent confusing cursor blinking
config.bind('<Escape>', 'clear-keychain ;; search ;; fullscreen --leave ;; fake-key --global _0_1', mode='normal') # Added a fake click on a dummy <div> (see 'dunder' bindings) to get rid of the fucking sticky dropdowns
config.bind('<Ctrl-S>', 'hint tw-snippet ;; set input.spatial_navigation true ;; enter-mode insert', mode='insert')
config.bind('<Ctrl-]>', 'hint tw-editor-height ;; set input.spatial_navigation true ;; enter-mode insert', mode='insert')
config.bind('<Ctrl-Shift-F>', 'fake-key <Ctrl-Shift-F> ;; enter-mode insert ;; set input.spatial_navigation true')
config.bind('<Ctrl-Shift-A>', 'fake-key <Ctrl-Shift-A> ;; enter-mode insert ;; set input.spatial_navigation true')
config.bind('<Ctrl-Shift-N>', 'fake-key <Ctrl-Shift-N> ;; enter-mode insert ;; set input.spatial_navigation true')

config.bind('<Alt-V>', 'open-editor', mode='insert')
config.bind('<Alt-V>', 'hint inputs ;; later 10 open-editor', mode='normal')


config.bind('tn', 'config-cycle -p input.spatial_navigation true false', mode='normal')
config.bind('gg', 'run-with-count 500 scroll up')
config.bind('G', 'run-with-count 500 scroll down')
config.bind('<Ctrl-G><Ctrl-G>', 'scroll-to-perc 0')
config.bind('<Ctrl-Shift-G>', 'scroll-to-perc 100')

# This was an attempt to make qutebrowser automatically go to insert mode after hitting the 'edit tiddler button' (it can't do it normally because it
# can't recognize when javascript focuses elements). This workaroud involved two userscripts, one calling the other, and, while it is actually working,
# it's just too slow. Maybe I should try this workaround some time later, when i get myself an SSD - i suspect the slowness comes pretty much exclusively
# from the need to open the files!
#config.bind('r', 'spawn --userscript edit-tiddler-main.sh')
#config.bind('<Ctrl-R>', 'spawn --userscript edit-tiddler-main.sh')
#config.bind('<Ctrl-R>', 'spawn --userscript edit-tiddler-main.sh', mode='insert')

config.unbind('<Ctrl-V>')
config.bind('<Ctrl-Shift-V>', 'enter-mode passthrough')

config.bind('<Alt-m>', 'yank -s ;; spawn -d buku_run')

# Vim-like marks
config.unbind('m')
for symbol in en_symbols:
    config.bind('m' + symbol, 'set-mark ' + symbol)
    config.bind("' " + symbol, 'jump-mark ' + symbol)

# config.bind('<Ctrl-C>', 'clear-keychain ;; search ;; fullscreen --leave ;; fake-key --global _0_1', mode='normal')
config.bind('<Ctrl-G>', 'clear-keychain ;; search ;; fullscreen --leave ;; fake-key --global _0_1', mode='normal')
# config.bind('<Ctrl-C>', 'leave-mode', mode='caret')
# config.bind('<Ctrl-C>', 'leave-mode', mode='command')
# config.bind('<Ctrl-C>', 'leave-mode', mode='hint')
#config.bind('<Ctrl-C>', 'leave-mode ;; set input.spatial_navigation false', mode='insert')
config.bind('<Ctrl-G>', 'leave-mode ;; set input.spatial_navigation false', mode='insert')
# config.bind('<Ctrl-C>', 'leave-mode', mode='prompt')
# config.bind('<Ctrl-C>', 'leave-mode', mode='register')
# config.bind('<Ctrl-C>', 'leave-mode', mode='yesno')

# Evil-escape
config.bind('jk', 'leave-mode', mode='command')
config.bind('jm', 'command-accept',mode='command')
config.bind('jk', 'leave-mode', mode='yesno')
config.bind('jk', 'leave-mode', mode='prompt')
config.bind('jk', 'leave-mode', mode='hint')

config.bind('<Ctrl-T>', 'fake-key <Ctrl-]>', mode='insert')  # 'tab'/indent (vim)
config.bind('<Ctrl-O>', 'fake-key <Return> ;; fake-key <Up> ;; fake-key <End>', mode='insert')
config.bind('<Ctrl-I>', 'fake-key <Tab>', mode='insert')  # tab (bash/ASCII ^I)
config.bind('<Ctrl-Alt-D>', 'fake-key <Shift-Tab>', mode='insert')  # 'de-tab'/dedent (vim)
config.bind('<Ctrl-D>', 'fake-key <Del>', mode='insert')
config.bind('<Alt-D>', 'fake-key <Ctrl-Del>', mode='insert')
config.bind('<Ctrl-F>', 'fake-key <Right>', mode='insert')
config.bind('<Ctrl-B>', 'fake-key <Left>', mode='insert')
config.bind('<Alt-F>', 'fake-key <Ctrl-Right>', mode='insert')
config.bind('<Alt-B>', 'fake-key <Ctrl-Left>', mode='insert')
config.bind('<Ctrl-K>', 'fake-key <Shift-End> ;; fake-key <Del>', mode='insert')  # kill line forward (emacs/bash)
config.bind('<Ctrl-/>', 'fake-key <Ctrl-Z> ;; fake-key <Left> ;; fake-key <Right>', mode='insert') # undo (bash)

config.bind('<Alt-W>', 'fake-key <Ctrl-Insert>', mode='insert')
config.bind('<Alt-Y>', 'fake-key <Shift-Insert>', mode='insert')

config.bind('<Alt-U>', 'fake-key <Shift-Home> ;; fake-key <Del> ;; fake-key <Backspace> ;; fake-key <Ctrl-[>', mode='insert')
config.bind('<Alt-O>', 'fake-key <End> ;; fake-key <Return>', mode='insert')

config.bind('<Alt-A>', 'fake-key <Ctrl-Home>', mode='insert')
config.bind('<Alt-E>', 'fake-key <Ctrl-End>', mode='insert')
config.bind('<Ctrl-Alt-A>', 'fake-key <Home>', mode='insert')
config.bind('<Ctrl-Alt-E>', 'fake-key <End>', mode='insert')

# Tab key replacement
config.bind('<Ctrl-I>', 'fake-key <Tab>', mode='normal')
config.bind('<Ctrl-Alt-I>', 'fake-key <Shift-Tab>', mode='normal')
config.bind('<Ctrl-I>', 'prompt-item-focus next', mode='prompt')
config.bind('<Ctrl-Alt-I>', 'prompt-item-focus prev', mode='prompt')
config.bind('<Ctrl-I>', 'completion-item-focus next', mode='command')
config.bind('<Ctrl-Alt-I>', 'completion-item-focus prev', mode='command')

config.bind('=', 'zoom-in', mode='normal')

config.bind('gh', 'tab-prev', mode='normal')
config.bind('gj', 'tab-next', mode='normal')
config.bind('gk', 'tab-prev', mode='normal')
config.bind('gl', 'tab-next', mode='normal')

config.bind('g1', 'tab-focus 1', mode='normal')
config.bind('g2', 'tab-focus 2', mode='normal')
config.bind('g3', 'tab-focus 3', mode='normal')
config.bind('g4', 'tab-focus 4', mode='normal')
config.bind('g5', 'tab-focus 5', mode='normal')
config.bind('g6', 'tab-focus 6', mode='normal')
config.bind('g7', 'tab-focus 7', mode='normal')
config.bind('g8', 'tab-focus 8', mode='normal')
config.bind('g9', 'tab-focus 9', mode='normal')
config.bind('g0', 'tab-focus -1', mode='normal')

config.set('tabs.close_mouse_button_on_bar', 'close-current')

config.bind('g.','set-cmd-text :')
config.bind('go','open -r -t ;; set-cmd-text :')

config.bind('<Ctrl-T>', 'config-cycle completion.height 50% 25% 0%', mode='command')
config.bind('<Ctrl-S>', 'config-cycle completion.shrink true false', mode='command')

config.bind('<Ctrl-W>', 'rl-backward-kill-word', mode='command')
config.bind('<Ctrl-W>', 'rl-backward-kill-word ;; rl-backward-kill-word', mode='prompt')

config.bind('<Space>','spawn --userscript selective-spacebar.sh')
config.bind('z','spawn /home/boris/.local/share/qutebrowser/userscripts/selective-spacebar-bin.sh {url}')

config.bind('a', 'spawn\
                  xdotool\
                  type\
                  _dtw')

# config.bind('<Ctrl-C><Ctrl-C>', 'hint --first codemirror')
config.bind('<Ctrl-C><Ctrl-C>', 'fake-key <Ctrl-[> ;; fake-key --global <Escape> ;; fake-key --global <Escape> ;; later 50 hint --first codemirror ;; later 200 enter-mode insert ;; set input.spatial_navigation true', mode='insert')
config.bind('<Ctrl-C><Ctrl-C>', 'fake-key <Ctrl-[> ;; fake-key --global <Escape> ;; fake-key --global <Escape> ;; later 50 hint --first codemirror ;; later 200 enter-mode insert ;; set input.spatial_navigation true', mode='normal')
# config.bind('<Ctrl-C><Ctrl-C>', 'hint --first tiddler-title ;; later 1000 fake-key <Up> ;; later 1000 hint --first codemirror ;; later 10 hint --first codemirror', mode='insert')
# config.bind('<Ctrl-C><Ctrl-C>', 'hint --first tiddler-title ;; later 200 message-info foo', mode='insert')
# config.bind('<Ctrl-C><Ctrl-C>', 'enter-mode normal ;; later 10 fake-key --global _0_1 ;; hint --first codemirror ;; later 15 enter-mode insert', mode='insert')
# config.bind('<Ctrl-C><Ctrl-C>', 'fake-key --global _0_1 ;; hint --first codemirror ;; later 15 enter-mode insert', mode='insert')

config.bind('<Ctrl-T>', 'hint tiddler-title ;; set input.spatial_navigation true')
config.bind('<Ctrl-3>', 'hint tiddler-add-tag ;; set input.spatial_navigation true')
config.bind('<Ctrl-F>', 'hint tiddler-add-field ;; set input.spatial_navigation true')
config.bind('<Ctrl-S>', 'hint tiddlers-and-fields ;; set input.spatial_navigation true')
config.bind('<Ctrl-C><Ctrl-X>', 'hint cancel-and-delete ;; set input.spatial_navigation false')

config.bind('<Ctrl-T>', 'hint tiddler-title ;; set input.spatial_navigation true', mode='insert')
config.bind('<Ctrl-3>', 'hint tiddler-add-tag ;; set input.spatial_navigation true', mode='insert')
config.bind('<Ctrl-F>', 'hint tiddler-add-field ;; set input.spatial_navigation true', mode='insert')
config.bind('<Ctrl-S>', 'hint tiddlers-and-fields ;; set input.spatial_navigation true', mode='insert')
config.bind('<Ctrl-C><Ctrl-X>', 'hint cancel-and-delete ;; set input.spatial_navigation false', mode='insert')

config.bind('<Ctrl-T>', 'hint tiddler-title ;; set input.spatial_navigation true', mode='hint')
config.bind('<Ctrl-3>', 'hint tiddler-add-tag ;; set input.spatial_navigation true', mode='hint')
config.bind('<Ctrl-F>', 'hint tiddler-add-field ;; set input.spatial_navigation true', mode='hint')
config.bind('<Ctrl-S>', 'hint tiddlers-and-fields ;; set input.spatial_navigation true', mode='hint')
config.bind('<Ctrl-C><Ctrl-X>', 'hint cancel-and-delete ;; set input.spatial_navigation false', mode='hint')

config.bind('t', 'follow-selected', mode='caret')
