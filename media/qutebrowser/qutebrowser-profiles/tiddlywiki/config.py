import subprocess
import os
from qutebrowser.api import interceptor
# from itertools import product
# from random import shuffle

# flake8: noqa

# Autogenerated config.py
#
# NOTE: config.py is intended for advanced users who are comfortable
# with manually migrating the config file on qutebrowser upgrades. If
# you prefer, you can also configure qutebrowser using the
# :set/:bind/:config-* commands without having to write a config.py
# file.
#
# Documentation:
#   qute://help/configuring.html
#   qute://help/settings.html

# Uncomment this to still load settings configured via autoconfig.yml
# config.load_autoconfig()

# Which cookies to accept. With QtWebEngine, this setting also controls
# other features with tracking capabilities similar to those of cookies;
# including IndexedDB, DOM storage, filesystem API, service workers, and
# AppCache. Note that with QtWebKit, only `all` and `never` are
# supported as per-domain values. Setting `no-3rdparty` or `no-
# unknown-3rdparty` per-domain on QtWebKit will have the same effect as
# `all`. If this setting is used with URL patterns, the pattern gets
# applied to the origin/first party URL of the page making the request,
# not the request URL.
# Type: String
# Valid values:
#   - all: Accept all cookies.
#   - no-3rdparty: Accept cookies from the same origin only. This is known to break some sites, such as GMail.
#   - no-unknown-3rdparty: Accept cookies from the same origin only, unless a cookie is already set for the domain. On QtWebEngine, this is the same as no-3rdparty.
#   - never: Don't accept cookies at all.
config.set('content.cookies.accept', 'all', 'chrome-devtools://*')

# Which cookies to accept. With QtWebEngine, this setting also controls
# other features with tracking capabilities similar to those of cookies;
# including IndexedDB, DOM storage, filesystem API, service workers, and
# AppCache. Note that with QtWebKit, only `all` and `never` are
# supported as per-domain values. Setting `no-3rdparty` or `no-
# unknown-3rdparty` per-domain on QtWebKit will have the same effect as
# `all`. If this setting is used with URL patterns, the pattern gets
# applied to the origin/first party URL of the page making the request,
# not the request URL.
# Type: String
# Valid values:
#   - all: Accept all cookies.
#   - no-3rdparty: Accept cookies from the same origin only. This is known to break some sites, such as GMail.
#   - no-unknown-3rdparty: Accept cookies from the same origin only, unless a cookie is already set for the domain. On QtWebEngine, this is the same as no-3rdparty.
#   - never: Don't accept cookies at all.
config.set('content.cookies.accept', 'all', 'devtools://*')

# User agent to send.  The following placeholders are defined:  *
# `{os_info}`: Something like "X11; Linux x86_64". * `{webkit_version}`:
# The underlying WebKit version (set to a fixed value   with
# QtWebEngine). * `{qt_key}`: "Qt" for QtWebKit, "QtWebEngine" for
# QtWebEngine. * `{qt_version}`: The underlying Qt version. *
# `{upstream_browser_key}`: "Version" for QtWebKit, "Chrome" for
# QtWebEngine. * `{upstream_browser_version}`: The corresponding
# Safari/Chrome version. * `{qutebrowser_version}`: The currently
# running qutebrowser version.  The default value is equal to the
# unchanged user agent of QtWebKit/QtWebEngine.  Note that the value
# read from JavaScript is always the global value. With QtWebEngine
# between 5.12 and 5.14 (inclusive), changing the value exposed to
# JavaScript requires a restart.
# Type: FormatString
config.set('content.headers.user_agent', 'Mozilla/5.0 ({os_info}) AppleWebKit/{webkit_version} (KHTML, like Gecko) {upstream_browser_key}/{upstream_browser_version} Safari/{webkit_version}', 'https://web.whatsapp.com/')

# User agent to send.  The following placeholders are defined:  *
# `{os_info}`: Something like "X11; Linux x86_64". * `{webkit_version}`:
# The underlying WebKit version (set to a fixed value   with
# QtWebEngine). * `{qt_key}`: "Qt" for QtWebKit, "QtWebEngine" for
# QtWebEngine. * `{qt_version}`: The underlying Qt version. *
# `{upstream_browser_key}`: "Version" for QtWebKit, "Chrome" for
# QtWebEngine. * `{upstream_browser_version}`: The corresponding
# Safari/Chrome version. * `{qutebrowser_version}`: The currently
# running qutebrowser version.  The default value is equal to the
# unchanged user agent of QtWebKit/QtWebEngine.  Note that the value
# read from JavaScript is always the global value. With QtWebEngine
# between 5.12 and 5.14 (inclusive), changing the value exposed to
# JavaScript requires a restart.
# Type: FormatString
config.set('content.headers.user_agent', 'Mozilla/5.0 ({os_info}) AppleWebKit/{webkit_version} (KHTML, like Gecko) {upstream_browser_key}/{upstream_browser_version} Safari/{webkit_version} Edg/{upstream_browser_version}', 'https://accounts.google.com/*')

# User agent to send.  The following placeholders are defined:  *
# `{os_info}`: Something like "X11; Linux x86_64". * `{webkit_version}`:
# The underlying WebKit version (set to a fixed value   with
# QtWebEngine). * `{qt_key}`: "Qt" for QtWebKit, "QtWebEngine" for
# QtWebEngine. * `{qt_version}`: The underlying Qt version. *
# `{upstream_browser_key}`: "Version" for QtWebKit, "Chrome" for
# QtWebEngine. * `{upstream_browser_version}`: The corresponding
# Safari/Chrome version. * `{qutebrowser_version}`: The currently
# running qutebrowser version.  The default value is equal to the
# unchanged user agent of QtWebKit/QtWebEngine.  Note that the value
# read from JavaScript is always the global value. With QtWebEngine
# between 5.12 and 5.14 (inclusive), changing the value exposed to
# JavaScript requires a restart.
# Type: FormatString
config.set('content.headers.user_agent', 'Mozilla/5.0 ({os_info}) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99 Safari/537.36', 'https://*.slack.com/*')

# User agent to send.  The following placeholders are defined:  *
# `{os_info}`: Something like "X11; Linux x86_64". * `{webkit_version}`:
# The underlying WebKit version (set to a fixed value   with
# QtWebEngine). * `{qt_key}`: "Qt" for QtWebKit, "QtWebEngine" for
# QtWebEngine. * `{qt_version}`: The underlying Qt version. *
# `{upstream_browser_key}`: "Version" for QtWebKit, "Chrome" for
# QtWebEngine. * `{upstream_browser_version}`: The corresponding
# Safari/Chrome version. * `{qutebrowser_version}`: The currently
# running qutebrowser version.  The default value is equal to the
# unchanged user agent of QtWebKit/QtWebEngine.  Note that the value
# read from JavaScript is always the global value. With QtWebEngine
# between 5.12 and 5.14 (inclusive), changing the value exposed to
# JavaScript requires a restart.
# Type: FormatString
config.set('content.headers.user_agent', 'Mozilla/5.0 ({os_info}; rv:71.0) Gecko/20100101 Firefox/71.0', 'https://docs.google.com/*')

# User agent to send.  The following placeholders are defined:  *
# `{os_info}`: Something like "X11; Linux x86_64". * `{webkit_version}`:
# The underlying WebKit version (set to a fixed value   with
# QtWebEngine). * `{qt_key}`: "Qt" for QtWebKit, "QtWebEngine" for
# QtWebEngine. * `{qt_version}`: The underlying Qt version. *
# `{upstream_browser_key}`: "Version" for QtWebKit, "Chrome" for
# QtWebEngine. * `{upstream_browser_version}`: The corresponding
# Safari/Chrome version. * `{qutebrowser_version}`: The currently
# running qutebrowser version.  The default value is equal to the
# unchanged user agent of QtWebKit/QtWebEngine.  Note that the value
# read from JavaScript is always the global value. With QtWebEngine
# between 5.12 and 5.14 (inclusive), changing the value exposed to
# JavaScript requires a restart.
# Type: FormatString
config.set('content.headers.user_agent', 'Mozilla/5.0 ({os_info}; rv:71.0) Gecko/20100101 Firefox/71.0', 'https://drive.google.com/*')

# Load images automatically in web pages.
# Type: Bool
config.set('content.images', True, 'chrome-devtools://*')

# Load images automatically in web pages.
# Type: Bool
config.set('content.images', True, 'devtools://*')

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'chrome-devtools://*')

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'devtools://*')

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'chrome://*/*')

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'qute://*/*')

# Switch to insert mode when clicking flash and other plugins.
# Type: Bool
#c.input.insert_mode.plugins = True

# === My Configs ===

config.load_autoconfig(False)

## Unbind stuff in normal mode
config.unbind('m')
config.unbind('wi')
config.unbind('<Ctrl-Tab>')
config.unbind('<Ctrl-t>')
config.unbind('<Ctrl-n>')
config.unbind('<Ctrl-Shift-n>')
config.unbind('<Ctrl-w>')
config.unbind('<Ctrl-Shift-w>')
config.unbind('<Ctrl-PgDown>')
config.unbind('<Ctrl-PgUp>')
config.unbind('<F5>')
config.unbind('<Ctrl-F5>')
config.unbind('<Back>')
config.unbind('<Forward>')
config.unbind('<F11>')
config.unbind('<Ctrl-Shift-t>')
config.unbind('<Ctrl-Shift-Tab>')
config.unbind('<Ctrl-^>')
config.unbind('<Alt+1>')
config.unbind('<Alt+2>')
config.unbind('<Alt+3>')
config.unbind('<Alt+4>')
config.unbind('<Alt+5>')
config.unbind('<Alt+6>')
config.unbind('<Alt+7>')
config.unbind('<Alt+8>')
config.unbind('<Alt+9>')
config.unbind('<Ctrl-h>')
config.unbind('<Ctrl-s>')
config.unbind('<Ctrl-Alt-p>')
config.unbind('<Ctrl-p>')
config.unbind('<Ctrl-Q>') # :q should be enough
config.unbind('ad') # download cancel
config.unbind('cd') # download clear
config.unbind('g$') # tab-focus -1 (<Ctrl-0> should be enough)
config.unbind('g0') # tab-focus 1 (<Ctrl-1> should be enough)
config.unbind('g^') # tab-focus 1 (<Ctrl-1> should be enough)
config.unbind('ga') # open -t (O + <Enter> should be enough)
config.unbind('gb') # bookmark-load (i'll deal with bookmarks later when i install buku)  !!!!!!!!!
config.unbind('gB') # bookmark-load -t (i'll deal with bookmarks later when i install buku)  !!!!!!!!
config.unbind('gC') # tab-clone
config.unbind('gd') # download
config.unbind('gD') # tab-give
config.unbind('gf') # view source (i don't know what to do with it yet) !!!!!! ALERT!!!!!
# config.unbind('gl') # tab-move -
config.unbind('gm') # tab-move
config.unbind('gO') # set-cmd-text :open -t -r {url:pretty}
config.unbind('go') # set-cmd-text :open {url:pretty}
# config.unbind('gr') # tab-move +
config.unbind('gt') # set-cmd-text -s :buffer
config.unbind('gU') # navigate up -t
config.unbind('co') # tab-only
config.unbind('J')
config.unbind('K')
config.unbind('r') # Prevent accidental reloads
config.unbind('R') # Prevent accidental reloads
config.unbind('xo') # set-cmd-text -s :open -b
config.unbind('xO') # set-cmd-text :open -b -r {url:pretty}
config.unbind('d') # tab-close
#config.unbind('e') # just in case...
config.unbind('j')  # enable keydrown
config.unbind('k')  # enable keydrown
config.unbind('D') # tab-close -o
config.unbind('th') # back -t
config.unbind('tl') # forward -t
config.unbind('o') # open
config.unbind('O') # open -t
config.unbind('wh') # back -w
config.unbind('wl') # forward -w
config.unbind('.') # repeat last action (it may be problematic with russian layout
c.bindings.key_mappings = {} # Unmap <Ctrl-[> so codemirror can use it

# Make normal mode language agnostic
en_symbols = list("qwertyuiop[]asdfghjkl;'zxcvbnm,.QWERTYUIOP{}ASDFGHJKL:\"ZXCVBNM<>")
ru_symbols = list("йцукенгшщзхъфывапролджэячсмитьбюЙЦУКЕНГШЩЗХЪФЫВАПРОЛДЖЭЯЧСМИТЬБЮ")
c.bindings.key_mappings = dict(zip(ru_symbols, en_symbols))
for i in range(32):
    c.bindings.key_mappings['<Alt-' + ru_symbols[i] + '>'] = '<Alt-' + en_symbols[i] + '>'


# The "dunder" bindings

# Command chaining (_ = dunder, c = command chain, next two digits = id of chain, last digit = id of command in chain)
# NOTE "Command chaining" is my workaround for inability of some commands (like jseval) to have additional commands chained after them normally (i.e. with ;;)
# TODO make _0, _1 and _2 bindings conform to this!


# _c00: Quick access to various sidebar tabs
# Quick navigation between open tiddlers (mapped to _dtwbb/<Space>bb/show buffers)
config.bind('_c000', 'jseval -q document.querySelector(`button[title="Show sidebar"]`).click()')  # in tiddlywiki, click 'show sidebar'
config.bind('_c001', 'jseval -q document.querySelectorAll("button:not(.tc-btn-invisible)")[0].click();')  # in tiddlywiki, click the 'open' sidebar tab  # 7
config.bind('_c002', 'later 550 hint --rapid tw-open-tiddlers')  # in tiddlywiki, hint the 'open' sidebar tab's content
# View recent tiddlers
config.bind('_c003', 'jseval -q document.querySelectorAll("button:not(.tc-btn-invisible)")[1].click();')  # 8
# Show tiddlymap
config.bind('_c004', 'jseval -q document.querySelectorAll("button:not(.tc-btn-invisible)")[4].click();')  # 11
# Show tiddlymap live tab
config.bind('_c005', 'jseval -q document.querySelectorAll("button:not(.tc-btn-invisible)")[5].click();')  # 12
# Show 'more' tab
config.bind('_c006', 'jseval -q document.querySelectorAll("button:not(.tc-btn-invisible)")[3].click();')  # 10
# Show 'missing' subtab of the 'more' tab
config.bind('_c007', 'later 550 jseval -q document.querySelectorAll("button:not(.tc-btn-invisible)")[11].click();')  # 18
# Show 'my tools' tab
config.bind('_c008', 'jseval -q document.querySelectorAll("button:not(.tc-btn-invisible)")[7].click();')
# Show 'tree' subtab of the 'my tools' tab / show 'drafts' subtab of the 'more' tab
config.bind('_c009', 'later 550 jseval -q document.querySelectorAll("button:not(.tc-btn-invisible)")[12].click();')

# _c01: open developer tools, respecting the current layout (i.e. in this same workspace), and change wm_class
config.bind('_c010', 'spawn -d /home/boris/bin/i3/set-respect-layout.sh')
config.bind('_c011', 'devtools window ;; later 300 spawn -d /home/boris/.local/share/qutebrowser/userscripts/change-wm-class.sh')
config.bind('_c013', 'spawn i3-msg "mark --toggle inspect"')

# _c03: state for keydrown
config.bind('_c030', 'jseval -q -w main window.qutebrowserMode = "insert";')
config.bind('_c031', 'hint inputs')
config.bind('_c032', 'jseval -q -w main window.qutebrowserMode = "normal";')

# _c04: focusedTiddler handling for editing tiddlers
config.bind('_c040', 'fake-key <Ctrl-[> ;; fake-key --global <Escape> ;; fake-key --global <Escape> ;; later 50 hint --first codemirror ;; later 300 mode-enter insert ;; later 350 jseval -q -w main window.qutebrowserMode = "insert"')
config.bind('_c041', "jseval -q -w main focusedTiddler = `Draft of '` + focusedTiddler + `'`")
config.bind('_c042', 'hint tiddler-title ;; later 40 fake-key <Ctrl-Enter> ;; set input.spatial_navigation false ;; later 80 mode-enter normal ;; later 100 jseval -q -w main window.qutebrowserMode = "normal";')
config.bind('_c043', "jseval -q -w main focusedTiddler = focusedTiddler.split(`'`)[1];")
config.bind('_c044', "jseval -q -w main listItems = document.querySelectorAll('.tc-topbar-left li'); for (const listItem of listItems) { if (listItem.innerText.trim() === focusedTiddler) {listItem.style.backgroundColor = 'purple';}};")
config.bind('_c045', 'mode-enter insert')
config.bind('_c046', 'mode-enter normal')

# Merge windows
config.bind('__', 'set-cmd-text -s :tab-take ;; later 10 fake-key --global <Tab> ;; later 10 fake-key --global <Return>')

# Create a <div id="0">
config.bind('_0', 'jseval -q tmp=document.createElement("div");document.body.appendChild(tmp);tmp.setAttribute("id", "0");')

# Click this div
config.bind('_1', 'click-element id 0 ;; jseval -q document.getElementById("0").remove();')

# Click this div a few ms later
config.bind('_2', 'later 30 click-element id 0')



# Domain keychains: TiddlyWiki (prefix _d44tw, where _ = dunder, d = domain, 44 = ASCII code of comma (i.e. the key that is dispatched), tw = tiddlywiki ) ! I had to use ascii code instead of the character itself, because when xdotool types it, it collides with the actual key pressed by me.. digits are safe since they're not used in keychains usually.
# NOTE "Domain keychains" is my (ugly and dirty) workaround the absence of the native domain-specific keybindings

# s key
config.bind('_d83twh', 'reveal_(tw)')
c.aliases['reveal_(tw)'] = 'hint tw-story-river-tiddlylinks hover'  # hover over tiddlylinks to trigger the preview plugin
config.bind('_d83twp', 'speak_(tw)')
c.aliases['speak_(tw)'] = 'hint tw-paragraphs userscript /home/boris/.local/share/qutebrowser/userscripts/run-mimic.sh'  # hover over tiddlylinks to trigger the preview plugin
config.bind('_d83tws', 'select-what-to-focus_(tw)')
c.aliases['select-what-to-focus_(tw)'] = 'hint tiddlers-and-fields'

# , key

# Aliases
c.aliases['merge-windows'] = 'fake-key --global _0_0_0_0'
c.aliases['noh'] = 'search'
c.aliases['bindings'] = 'open qute://bindings/'
c.aliases['bookmarks'] = 'open qute://bookmarks/'
c.aliases['version'] = 'open qute://version/'
c.aliases['buku-add'] = 'spawn buku -a {url}'
c.aliases['buku-load'] = 'spawn buku_run'

# Search engines
c.url.searchengines['google'] = "https://www.google.com/search?q={}"
c.url.searchengines['youtube'] = "https://www.youtube.com/search?q={}"
c.url.searchengines['reddit'] = "https://www.reddit.com/search?q={}"
c.url.searchengines['stackoverflow'] = "https://www.stackoverflow.com/search?q={}"
c.url.searchengines['math.stackexchange'] = "https://math.stackexchange.com/search?q={}"
c.url.searchengines['askubuntu'] = "https://askubuntu.com/search?q={}"
c.url.searchengines['wikipedia'] = "https://wikipedia.org/wiki/{}"
c.url.searchengines['emuparadise'] = "https://www.emuparadise.me/roms/search.php?query={}"
c.url.searchengines['python.org'] = "https://www.python.org/search/?q={}"
c.url.searchengines['greasespot'] = "https://wiki.greasespot.net/index.php?title=Special%3ASearch&search={}&go=Go"
c.url.searchengines['greasyfork'] = "https://greasyfork.org/en/scripts?q={}"
c.url.searchengines['openuserjs'] = "https://openuserjs.org/?q={}"
c.url.searchengines['svg-wikimedia'] = "https://commons.wikimedia.org/w/index.php?sort=relevance&search={}+filemime%3Aimage%2Fsvg%2Bxml&title=Special:Search&profile=advanced&fulltext=1&advancedSearch-current=%7B%22fields%22%3A%7B%22filetype%22%3A%22image%2Fsvg%2Bxml%22%7D%7D&ns0=1&ns1=1&ns2=1&ns3=1&ns4=1&ns5=1&ns6=1&ns7=1&ns8=1&ns9=1&ns10=1&ns11=1&ns12=1&ns13=1&ns14=1&ns15=1&ns100=1&ns101=1&ns102=1&ns103=1&ns104=1&ns105=1&ns106=1&ns107=1&ns460=1&ns461=1&ns486=1&ns487=1&ns490=1&ns491=1&ns828=1&ns829=1&ns1198=1&ns1199=1&ns2300=1&ns2301=1&ns2302=1&ns2303=1"
c.url.searchengines['github'] = "https://github.com/search?q={}"
c.url.searchengines['translate:ru-to-en'] = "https://translate.google.com/#view=home&op=translate&sl=ru&tl=en&text={}"
c.url.searchengines['translate:en-to-ru'] = "https://translate.google.com/#view=home&op=translate&sl=en&tl=ru&text={}"

# Characters used for hint strings
c.hints.chars = "sfgwrtuiocvnm.23489"

# Add hints selectors
c.hints.selectors['paragraphs'] = ['div, span, p, ol, ul, h1, h2, h3, h4, h5, h6']
c.hints.selectors['alll'] = ['*']
c.hints.selectors['yt'] = ['yt-formatted-string']
c.hints.selectors['yt-video'] = ['video']
c.hints.selectors['all'].append('yt-formatted-string')
c.hints.selectors['all'].append('h3 span')
c.hints.selectors['all'].append('span.qt_read_more')   # the fucking quora's read button!
c.hints.selectors['tables'] = ['table']
c.hints.selectors['pre'] = ['pre']
c.hints.selectors['foo'] = ['.tc-block-dropdown']
c.hints.selectors['sidebar'] = ['.tc-sidebar-tabs-main > .tc-tab-selected']
c.hints.selectors['title'] = ['.tc-site-title']
c.hints.selectors['edit-tiddler'] = ['.tc-image-edit-button, .tc-image-close-button, .tc-edit-texteditor, .CodeMirror-lines, .tc-tab-buttons>button, .tc-tag-label, input[placeholder="field value"]']
c.hints.selectors['tw-snippet'] = ['button[title="Insert a preconfigured snippet of text - [ctrl-S]"]']
c.hints.selectors['tw-editor-height'] = ['button[title="Choose the height of the text editor"]']
c.hints.selectors['sidebar-scrollable'] = ['.tc-sidebar-scrollable']
c.hints.selectors['sidebar-scrollable-child'] = ['div.tc-sidebar-scrollable>div>div']
c.hints.selectors['codemirror'] = ['.tc-image-edit-button, .CodeMirror-lines']
c.hints.selectors['tiddler-add-tag'] = ['input[placeholder="tag name"]']
c.hints.selectors['tiddler-add-field'] = ['input[placeholder="field name"]']
c.hints.selectors['tiddler-title'] = ['input.tc-titlebar']
c.hints.selectors['tiddlers-and-fields'] = ['.tc-image-edit-button, input[placeholder="field value"], .CodeMirror-lines']
c.hints.selectors['cancel-and-delete'] = ['.tc-image-cancel-button, .tc-image-close-button, button[title="Remove field"]']
c.hints.selectors['radio-unchecked'] = ['svg']
c.hints.selectors['folder'] = ['svg.tc-image-folder']
c.hints.selectors['tw-open-tiddlers'] = ['div.tc-sidebar-tab-open-item>span>div>a']
c.hints.selectors['vis-up'] = ['.vis-up']
c.hints.selectors['vis-down'] = ['.vis-down']
c.hints.selectors['vis-left'] = ['.vis-left']
c.hints.selectors['vis-right'] = ['.vis-right']
c.hints.selectors['vis-zoomIn'] = ['.vis-zoomIn']
c.hints.selectors['vis-zoomOut'] = ['.vis-zoomOut']
# unfortunately, hinting vis buttons failed to navigate tiddlymap, so one day I am going to try stuff like pyautogui's correlation instead.
# I'll leave these selectors here just in case. Who knows - maybe they appear to be at least of some use eventually...
c.hints.selectors['tw-advanced-search'] = ['div.tc-advanced-search>div>div>button, div.tc-advanced-search>div>div>div>p>div>input']
c.hints.selectors['tw-editor-submenu'] = ['div.tc-drop-down.tc-popup-keep>a, div.tc-drop-down.tc-popup-keep>p>label>input, div.tc-drop-down.tc-popup-keep>p>label>span>input, div.tc-drop-down.tc-popup-keep>p>input, div.tc-drop-down.tc-popup-keep>p>select, div.tc-drop-down.tc-popup-keep>p>button, div.tc-drop-down.tc-popup-keep>p>div>div>a']
c.hints.selectors['select'] = ['select']
c.hints.selectors['tw-show-sidebar'] = ['button[title="Show sidebar"]']
c.hints.selectors['tw-hide-sidebar'] = ['button[title="Hide sidebar"]']
c.hints.selectors['tw-paragraphs'] = ['section.tc-story-river p, section.tc-story-river ol, section.tc-story-river ul']
c.hints.selectors['tw-story-river-tiddlylinks'] = ['section.tc-story-river a.tc-tiddlylink']
c.hints.selectors['tw-story-river-close'] = ['section.tc-story-river button[title="Close this tiddler"]']
c.hints.selectors['frame'] = [ 'div', 'header', 'section', 'nav']
c.hints.selectors['div'] = ['div']
c.hints.selectors['header'] = ['header']
c.hints.selectors['section'] = ['section']
c.hints.selectors['nav'] = ['nav']
c.hints.selectors['yt-skip-ad'] = ['button.ytp-ad-skip-button']

# Open base URL of a search engine if no search terms
c.url.open_base_url = True

# Insert mode on sites load
c.input.insert_mode.auto_load = False
c.input.insert_mode.leave_on_load = True
c.input.insert_mode.auto_enter = True
c.input.insert_mode.auto_leave = True
c.input.insert_mode.plugins = False

# Restore mode on tab change
config.set('tabs.mode_on_change', 'restore')

# Close window when the last tab is closed
config.set('tabs.last_close', 'close')

# Messages timeout
c.messages.timeout = 3000

# Partial input timeout
c.input.partial_timeout = 0

# Downloads position
config.set('downloads.position', 'bottom')

# Tabs max width
config.set('tabs.max_width', 200)

# Hints auto-follow
c.hints.auto_follow = 'always'

# Forbid autoplay
c.content.autoplay = False

# Keyhint delay
# c.keyhint.delay = 300
c.keyhint.delay = 0

# Uppercase for hints
c.hints.uppercase = True

config.bind(';s', 'hint paragraphs userscript /home/boris/.local/share/qutebrowser/userscripts/run-mimic.sh')
config.bind('m', 'hint paragraphs userscript /home/boris/.local/share/qutebrowser/userscripts/run-mimic.sh')

config.bind(';p', 'hint pre userscript yank-pre.sh')
config.bind(';T', 'hint tables userscript yank-table.sh')

config.bind('..', 'repeat-command')

config.bind(';v', 'hint paragraphs userscript /home/boris/.local/share/qutebrowser/userscripts/hint-caret.sh')
config.bind('f', 'hint paragraphs userscript /home/boris/.local/share/qutebrowser/userscripts/hint-caret.sh', mode='caret')

config.bind('o', 'set-cmd-text -s :open -r -t')
config.bind('O', 'set-cmd-text -s :open -r -b')
config.bind('A', 'set-cmd-text -s :open -b')
config.bind('$', 'set-cmd-text -s :open -t')

# Insert mode page navigation
config.bind('<Ctrl-E>', 'scroll-page 0 0.05', mode='insert')
config.bind('<Ctrl-Y>', 'scroll-page 0 -0.05', mode='insert')
config.bind('<Ctrl-P>', 'fake-key <Up>', mode='insert')
config.bind('<Ctrl-N>', 'fake-key <Down>', mode='insert')
config.bind('<Ctrl-P>', 'fake-key <Up>', mode='normal')  # for normal mode compatibility
config.bind('<Ctrl-N>', 'fake-key <Down>', mode='normal')  # for normale mode compatibility
config.bind('<Ctrl-H>', 'fake-key <Backspace>', mode='insert')
config.bind('<Ctrl-W>', 'fake-key <Ctrl-Backspace>', mode='insert')
config.bind('<Ctrl-U>', 'fake-key <Shift-Home> ;; fake-key <Backspace>', mode='insert')

# Caret mode page navigation
config.bind('d', 'scroll-page 0 0.1', mode='caret')
config.bind('e', 'scroll-page 0 -0.1', mode='caret')
config.bind('<Ctrl-F>', 'scroll-page 0 1', mode='caret')
config.bind('<Ctrl-B>', 'scroll-page 0 -1', mode='caret')
config.bind('<Ctrl-D>', 'scroll-page 0 0.5', mode='caret')
config.bind('<Ctrl-U>', 'scroll-page 0 -0.5', mode='caret')
config.bind('<Ctrl-E>', 'scroll-page 0 0.05', mode='caret')
config.bind('<Ctrl-Y>', 'scroll-page 0 -0.05', mode='caret')
config.bind('s', 'spawn --userscript /home/boris/.local/share/qutebrowser/userscripts/run-mimic-caret.sh', mode='caret')
config.bind('-', 'zoom-out', mode='caret')
config.bind('=', 'zoom-in', mode='caret')

# Prompt mode page navigation
config.bind('<Ctrl-F>', 'scroll-page 0 1', mode='prompt')
config.bind('<Ctrl-B>', 'scroll-page 0 -1', mode='prompt')
config.bind('<Ctrl-D>', 'scroll-page 0 0.5', mode='prompt')
config.bind('<Ctrl-U>', 'scroll-page 0 -0.5', mode='prompt')
config.bind('<Ctrl-E>', 'scroll-page 0 0.05', mode='prompt')
config.bind('<Ctrl-Y>', 'scroll-page 0 -0.05', mode='prompt')

# Normal mode page navigation
config.bind('<Ctrl-E>', 'scroll-page 0 0.05')
config.bind('<Ctrl-Y>', 'scroll-page 0 -0.05')
config.bind('d', 'scroll-page 0 0.1')
config.bind('e', 'scroll-page 0 -0.1')

# <Return> aliases
config.bind('<Ctrl-J>', 'command-accept', mode='command')
config.bind('<Ctrl-M>', 'command-accept', mode='command')
config.bind('<Ctrl-J>', 'fake-key <Return>', mode='insert')
config.bind('<Ctrl-M>', 'fake-key <Return>', mode='insert')
config.bind('<Ctrl-J>', 'selection-follow', mode='normal')
config.bind('<Ctrl-J>', 'prompt-accept', mode='prompt')
config.bind('<Ctrl-M>', 'prompt-accept', mode='prompt')

# Tab switching
config.bind('<Ctrl-.>', 'tab-move +')
config.bind('<Ctrl-,>', 'tab-move -')
config.bind('<Ctrl-.>', 'tab-move +', mode='insert')
config.bind('<Ctrl-,>', 'tab-move -', mode='insert')
config.bind('<Ctrl-.>', 'tab-move +', mode='prompt')
config.bind('<Ctrl-,>', 'tab-move -', mode='prompt')

config.bind('<Alt-J>', 'tab-next', mode='normal')
config.bind('<Alt-K>', 'tab-prev', mode='normal')
config.bind('<Alt-H>', 'tab-prev', mode='normal')
config.bind('<Alt-L>', 'tab-next', mode='normal')
config.bind('<Alt-J>', 'tab-next', mode='insert')
config.bind('<Alt-K>', 'tab-prev', mode='insert')
config.bind('<Alt-H>', 'tab-prev', mode='insert')
config.bind('<Alt-L>', 'tab-next', mode='insert')
config.bind('<Alt-K>', 'tab-prev', mode='prompt')
config.bind('<Alt-L>', 'tab-next', mode='prompt')

for key_no in range(10):
    for mode in ['normal', 'insert', 'prompt']:
        tab_to_focus = " " + str(key_no) if key_no != 0 else " -1"
        tab_to_move = " " + str(key_no) if key_no != 0 else ""
        key_to_focus = '<Ctrl-{}>'.format(key_no)
        key_to_move = '<Alt-{}>'.format(key_no)
        command_to_focus = 'tab-focus{}'.format(tab_to_focus)
        command_to_move = 'tab-move{}'.format(tab_to_move)
        config.bind(key_to_focus, command_to_focus, mode=mode)
        config.bind(key_to_move, command_to_move, mode=mode)


# Tabs
config.bind('tt', 'config-cycle -p tabs.show always switching')
config.bind('tw', 'open -r -t http://127.0.0.1:8081/')
config.bind('tgu', 'navigate up -t')
config.bind('x', 'hint --first tw-story-river-close ;; jseval -q -w main var storyList = story.getStoryList(); var target = storyList[storyList.indexOf(focusedTiddler) + 1]; var altTarget = storyList[storyList.indexOf(focusedTiddler) - 1]; listItems = document.querySelectorAll(".tc-topbar-left li"); if (target) {focusedTiddler = target; for (const listItem of listItems) {listItem.style.backgroundColor = "blue";} for (const listItem of listItems) {if (listItem.innerText.trim() === target) {listItem.style.backgroundColor = "purple"};};} else if (altTarget) {focusedTiddler = altTarget; for (const listItem of listItems) {listItem.style.backgroundColor = "blue";} for (const listItem of listItems) {if (listItem.innerText.trim() === altTarget) {listItem.style.backgroundColor = "purple"};};};')  # in tiddlywiki it will close tiddlers rather than tabs
config.bind('s', 'spawn /home/boris/.local/share/qutebrowser/userscripts/NM_s_dispatcher.sh {url:host} {url:port}')  # special hinting for tiddlywiki
config.bind('<Alt-X>', 'tab-close')  # i'll try to use this instead
config.bind('<Alt-X>', 'tab-close', mode='insert')  # for insert mode compatibility (espetially on outo-insert on page start)
config.bind('X', 'tab-close -o')
config.bind('!x', 'tab-only')

# Downloads
config.bind('Du', 'download-cancel')
config.bind('D<Ctrl-R>', 'download-retry')
config.bind('Ddd', 'download-clear')
config.bind('DZQ', 'download-delete')
config.bind('DZZ', 'download-remove')
config.bind('DD', 'download-open')
config.bind('Dk', 'set downloads.position top')
config.bind('Dj', 'set downloads.position bottom')
config.bind('Dh', 'set downloads.position left')
config.bind('Dl', 'set downloads.position right')

config.bind(';k', 'hint alll delete')
config.bind(';a', 'hint alll')

config.bind('<Shift-Return>', 'hint-follow -s {hint-url}', mode='hint')

# Tiddlywiki
config.bind('<Alt+p>', 'hint sidebar-scrollable')
config.bind('r', 'hint edit-tiddler normal')
config.bind('<Ctrl-Return>', 'mode-leave ;; fake-key <Ctrl-Enter> ;; jseval -q -w main window.qutebrowserMode = "normal";', mode='insert')
# NOTE the set input.spatial_navigation false here is *intensional*
config.bind('<Ctrl-Escape>', 'fake-key <Ctrl-Escape> ;; mode-leave ;; jseval -q -w main window.qutebrowserMode = "normal";', mode='insert')
# NOTE the `set input.spatial_navigation false` in the two lines below is *intensional*
# XXX state for keydrown
config.bind('<Escape>', 'mode-leave ;; set input.spatial_navigation false ;; jseval -q -w main window.qutebrowserMode = "normal";', mode='insert')
config.bind('<Ctrl-G>', 'mode-leave ;; set input.spatial_navigation false ;; jseval -q -w main window.qutebrowserMode = "normal";', mode='insert')
config.bind('<Escape>', 'clear-keychain ;; search ;; fullscreen --leave ;; fake-key --global _0_1', mode='normal') # Added a fake click on a dummy <div> (see 'dunder' bindings) to get rid of the fucking sticky dropdowns

config.bind('<Ctrl-Tab>', 'fake-key <Alt-Right>', mode='insert')
config.bind('<Ctrl-Shift-Tab>', 'fake-key <Alt-Left>', mode='insert')


config.bind('tn', 'config-cycle -p input.spatial_navigation true false', mode='normal')
# config.bind('gg', 'run-with-count 500 scroll up')
# config.bind('G', 'run-with-count 500 scroll down')
config.bind('gg', 'scroll-to-perc 0')
config.bind('G', 'scroll-to-perc 100')

config.unbind('<Ctrl-V>')
config.bind('<Ctrl-Shift-V>', 'mode-enter passthrough')

config.bind('<Alt-m>', 'yank -s ;; spawn -d buku_run')

# config.bind('<Ctrl-G>', 'clear-keychain ;; search ;; fullscreen --leave ;; fake-key --global _0_1', mode='normal')
config.bind('<Ctrl-G>', 'clear-keychain ;; search ;; fullscreen --leave ;; fake-key --global _0_1', mode='normal')
config.bind('<Ctrl-G>', 'mode-leave', mode='caret')
config.bind('<Ctrl-G>', 'mode-leave', mode='command')
config.bind('<Ctrl-G>', 'mode-leave', mode='hint')
config.bind('<Ctrl-G>', 'mode-leave', mode='prompt')
config.bind('<Ctrl-G>', 'mode-leave', mode='register')
config.bind('<Ctrl-G>', 'mode-leave', mode='yesno')

# Evil-escape
config.bind('jk', 'mode-leave', mode='yesno')
config.bind('jk', 'mode-leave', mode='hint')

config.bind('<Ctrl-T>', 'fake-key <Ctrl-]>', mode='insert')  # 'tab'/indent (vim)
config.bind('<Ctrl-O>', 'fake-key <Return> ;; fake-key <Up> ;; fake-key <End>', mode='insert')
config.bind('<Ctrl-I>', 'fake-key <Tab>', mode='insert')  # tab (bash/ASCII ^I)
config.bind('<Ctrl-Alt-D>', 'fake-key <Shift-Tab>', mode='insert')  # 'de-tab'/dedent (vim)
config.bind('<Ctrl-D>', 'fake-key <Del>', mode='insert')
config.bind('<Alt-D>', 'fake-key <Ctrl-Del>', mode='insert')
config.bind('<Ctrl-F>', 'fake-key <Right>', mode='insert')
config.bind('<Ctrl-B>', 'fake-key <Left>', mode='insert')
config.bind('<Alt-F>', 'fake-key <Ctrl-Right>', mode='insert')
config.bind('<Alt-B>', 'fake-key <Ctrl-Left>', mode='insert')
config.bind('<Ctrl-K>', 'fake-key <Shift-End> ;; fake-key <Del>', mode='insert')  # kill line forward (emacs/bash)
config.bind('<Ctrl-/>', 'fake-key <Ctrl-Z> ;; fake-key <Left> ;; fake-key <Right>', mode='insert') # undo (bash)

config.bind('<Alt-W>', 'fake-key <Ctrl-Insert>', mode='insert')
config.bind('<Alt-Y>', 'fake-key <Shift-Insert>', mode='insert')

config.bind('<Alt-U>', 'fake-key <Shift-Home> ;; fake-key <Del> ;; fake-key <Backspace> ;; fake-key <Ctrl-[>', mode='insert')
config.bind('<Alt-O>', 'fake-key <End> ;; fake-key <Return>', mode='insert')

config.bind('<Alt-A>', 'fake-key <Ctrl-Home>', mode='insert')
config.bind('<Alt-E>', 'fake-key <Ctrl-End>', mode='insert')
config.bind('<Ctrl-Alt-A>', 'fake-key <Home>', mode='insert')
config.bind('<Ctrl-Alt-E>', 'fake-key <End>', mode='insert')

# Tab key replacement
config.bind('<Ctrl-I>', 'fake-key <Tab>', mode='normal')
config.bind('<Ctrl-Alt-I>', 'fake-key <Shift-Tab>', mode='normal')
config.bind('<Ctrl-Alt-I>', 'fake-key <Shift-Tab>', mode='insert')
config.bind('<Ctrl-I>', 'prompt-item-focus next', mode='prompt')
config.bind('<Ctrl-Alt-I>', 'prompt-item-focus prev', mode='prompt')
config.bind('<Ctrl-I>', 'completion-item-focus next', mode='command')
config.bind('<Ctrl-Alt-I>', 'completion-item-focus prev', mode='command')

config.bind('=', 'zoom-in', mode='normal')

config.bind('gh', 'tab-prev', mode='normal')
config.bind('gj', 'tab-next', mode='normal')
config.bind('gk', 'tab-prev', mode='normal')
config.bind('gl', 'tab-next', mode='normal')

config.bind('gh', 'tab-prev', mode='caret')
config.bind('gj', 'tab-next', mode='caret')
config.bind('gk', 'tab-prev', mode='caret')
config.bind('gl', 'tab-next', mode='caret')
config.bind('y', 'yank selection --keep', mode='caret')
config.bind('<Ctrl-Y>', 'yank selection', mode='caret')

config.bind('g1', 'tab-focus 1', mode='normal')
config.bind('g2', 'tab-focus 2', mode='normal')
config.bind('g3', 'tab-focus 3', mode='normal')
config.bind('g4', 'tab-focus 4', mode='normal')
config.bind('g5', 'tab-focus 5', mode='normal')
config.bind('g6', 'tab-focus 6', mode='normal')
config.bind('g7', 'tab-focus 7', mode='normal')
config.bind('g8', 'tab-focus 8', mode='normal')
config.bind('g9', 'tab-focus 9', mode='normal')
config.bind('g0', 'tab-focus -1', mode='normal')

config.set('tabs.close_mouse_button_on_bar', 'close-current')

config.bind('g.','set-cmd-text :')
config.bind('go','open -r -t ;; set-cmd-text :')

config.bind('<Ctrl-S>5', 'height=50%', mode='command')
c.aliases['height=50%'] = 'set completion.height 50%'
config.bind('<Ctrl-S>2', 'height=20%', mode='command')
c.aliases['height=20%'] = 'set completion.height 20%'
config.bind('<Ctrl-S>0', 'height=0%', mode='command')
c.aliases['height=0%'] = 'set completion.height 0%'
config.bind('<Ctrl-S>s', 'shrink', mode='command')
c.aliases['shrink'] = 'config-cycle completion.shrink true false'

config.bind('<Ctrl-W>', 'rl-backward-kill-word', mode='command')
config.bind('<Ctrl-W>', 'rl-backward-kill-word ;; rl-backward-kill-word', mode='prompt')

# this is the difference between running a bash script just as a program (just spawn) vs running it as a userscript (spawn --userscript).
# in the latter case, qutebrowser prepares some environment variables and a FIFO.. in the specific case of tiddllywiki this results in
# a very irritating delay (probably because of the huge DOM, but who knows..). in the former case you of course lose the ability to easily
# access the FIFO (it sort of works anyway - but veeeery slow - god knows what happens under the hood) - but if you don't need it and/or
# don't need the whole DOM, you're better off using just spawn.. in this particular case I needed the script to command qutebrowser - but I
# got away with a hack using xdotool.. speed-wise it's waaay better.
# config.bind('<Space>','spawn --userscript selective-spacebar.sh')
config.bind(",",'spawn -d /home/boris/.local/share/qutebrowser/userscripts/NM_comma_dispatcher.sh {url:host} {url:port}')

# this is an (working) example of how you can make complex commands more readable
# config.bind('a', 'spawn\
#                   xdotool\
#                   type\
#                   _dtw')

config.bind('<Ctrl-S>', 'hint tiddlers-and-fields')

config.bind('<Ctrl-S>', 'hint tiddlers-and-fields', mode='insert')

config.bind('<Ctrl-S>', 'mode-leave ;; hint tiddlers-and-fields', mode='hint')

config.bind(',', 'mode-leave ;; spawn /home/boris/.local/share/qutebrowser/userscripts/NM_comma_dispatcher.sh {url:host} {url:port}', mode='hint')
config.bind('jt', "config-cycle colors.hints.bg 'qlineargradient(x1:0, y1:0, x2:0, y2:1, stop:0 rgba(255, 247, 133, 0.8), stop:1 rgba(255, 197, 66, 0.8))' 'qlineargradient(x1:0, y1:0, x2:0, y2:1, stop:0 rgba(255, 247, 133, 0.2), stop:1 rgba(255, 197, 66, 0.2))' ;; config-cycle colors.hints.fg black 'rgba(0, 0, 0, 0.2)", mode='hint')

# XXX state for keydrown
config.bind('i', 'mode-enter insert ;; jseval -q -w main window.qutebrowserMode = "insert";')
config.bind('gi', 'hint inputs --first ;; jseval -q -w main window.qutebrowserMode = "insert";')
config.bind(';t', 'fake-key --global _c030_c031')

config.bind('td', 'spawn --userscript /home/boris/.local/share/qutebrowser/userscripts/toggle-keydrown.sh')

# config.bind('<Space><Space>', 'space')  # overriden with tiddlywiki profile
c.aliases['space'] = 'fake-key <Space>'

#c.aliases['edit-tiddler'] =  'fake-key <Ctrl-[> ;; fake-key --global <Escape> ;; fake-key --global <Escape> ;; later 50 hint --first codemirror ;; later 300 mode-enter insert ;; later 350 jseval -q -w main window.qutebrowserMode = "insert"'
c.aliases['edit-tiddler'] = 'fake-key --global _c040_c041_c044_c045'
config.bind('ge', 'edit-tiddler')

config.bind('wi', 'fake-key --global _c010 ;; fake-key --global _c013 ;; fake-key --global _c011')

config.bind('<Space>fed', 'config-edit')  # this should NOT be overriden
config.bind('<Space>fe<Shift-R>', 'config-source')  # this should NOT be overriden

c.fonts.default_size = '13pt'
c.zoom.default = '130%'
c.fonts.hints = 'bold 15pt default_family'
c.content.pdfjs = False
c.keyhint.radius = 0
c.fonts.keyhint = 'bold default_size default_family'
c.hints.radius = 0

c.content.notifications = False # globally turn off notifications, hoping that it will fix the service worker problem

c.fileselect.handler = 'external'
c.fileselect.multiple_files.command = ["/home/boris/kitty/kitty/launcher/kitty", "--class", "Gvim", "-e", "ranger", "--choosefile={}"]
c.fileselect.single_file.command = ["/home/boris/kitty/kitty/launcher/kitty", "--class", "Gvim", "-e", "ranger", "--choosefile={}"]

c.qt.workarounds.remove_service_workers = True
c.input.forward_unbound_keys = 'all'

config.bind('z', 'clear-messages')

c.aliases['restart_keydrown'] = 'jseval -q -w main kd.stop(); kd.run(function () {kd.tick();});'
config.bind('rk', 'restart_keydrown')
c.aliases['remove_messages'] = 'clear-messages'
config.bind('rm', 'remove_messages')

# === Tiddlywiki profile bindings (erase a lot of the upper ones after some testing) ===

# c.aliases['accept-changes'] = 'hint tiddler-title ;; later 40 fake-key <Ctrl-Enter> ;; set input.spatial_navigation false ;; later 80 mode-enter normal ;; later 100 jseval -q -w main window.qutebrowserMode = "normal";'
c.aliases['accept-changes'] = 'mode-enter normal ;; fake-key --global _c042_c043_c044_c046'
c.aliases['file-tree'] = 'mode-enter normal ;; fake-key --global _c000 ;; fake-key --global _c008 ;; fake-key --global _c009 ;; fake-key --global _c032'  # click the 'tree' tab of 'my tools'
c.aliases['file-tree_(insert-mode)'] =  'mode-enter normal ;; fake-key --global _c000 ;; fake-key --global _c008 ;; fake-key --global _c009 ;; later 100 mode-enter insert'
c.aliases['toggle-sidebar'] = 'fake-key <Ctrl-]>'  # toggle sidebar
c.aliases['list-buffers'] = 'mode-enter normal ;; fake-key --global _c000 ;; fake-key --global _c001 ;; fake-key --global _c002 ;; fake-key --global _c032' # click the 'open' sidebar tab and hint its content
c.aliases['draft-buffers'] = 'mode-enter normal ;; fake-key --global _c000 ;; fake-key --global _c006 ;; fake-key --global _c009 ;; fake-key --global _c032'  # click the 'drafts' button of the 'more' tab
c.aliases['draft-buffers_(insert-mode)'] = 'mode-enter normal ;; fake-key --global _c000 ;; fake-key --global _c006 ;; fake-key --global _c009 ;; later 100 mode-enter insert'
c.aliases['recent-tiddlers'] = 'mode-enter normal ;; fake-key --global _c000 ;; fake-key --global _c003 ;; fake-key --global _c032'  # show the 'recent' sidebar tab
c.aliases['recent-tiddlers_(insert-mode)'] = 'mode-enter normal ;; fake-key --global _c000 ;; fake-key --global _c003 ;; later 100 mode-enter insert'
c.aliases['missing-tiddlers'] = 'mode-enter normal ;; fake-key --global _c000 ;; fake-key --global _c006 ;; fake-key --global _c007 ;; fake-key --global _c032'  # show the missing tiddlers
c.aliases['missing-tiddlers_(insert-mode)'] = 'mode-enter normal ;; fake-key --global _c000 ;; fake-key --global _c006 ;; fake-key --global _c007 ;; later 100 mode-enter insert'
c.aliases['tiddlymap'] = 'mode-enter normal ;; fake-key --global _c000 ;; fake-key --global _c004 ;; fake-key --global _c032'  # click the 'map' sidebar tab
c.aliases['tiddlymap_(insert-mode)'] = 'mode-enter normal ;; fake-key --global _c000 ;; fake-key --global _c004 ;; later 100 edit-tiddler'
c.aliases['tmap-live-view'] = 'mode-enter normal ;; fake-key --global _c000 ;; fake-key --global _c005 ;; fake-key --global _c032'  # click the 'live' sidebar tab
c.aliases['tmap-live-view_(insert-mode)'] =  'mode-enter normal ;; fake-key --global _c000 ;; fake-key --global _c005 ;; later 100 edit-tiddler'
c.aliases['advanced-search'] = 'fake-key <Ctrl-Shift-A> ;; mode-enter insert ;; jseval -q -w main window.qutebrowserMode = "insert";'  # open advanced search and hint its tabs (and input)
c.aliases['sidebar-search'] = 'fake-key <Ctrl-Shift-F> ;; mode-enter insert ;; jseval -q -w main window.qutebrowserMode = "insert";'  # sidebar search
c.aliases['new-tiddler'] = 'fake-key <Ctrl-Shift-N> ;; mode-enter insert ;; jseval -q -w main window.qutebrowserMode = "insert";'  # new tiddler
c.aliases['toggle-preview'] = 'fake-key <Ctrl-;>'  # toggle preview
c.aliases['insert-unicode'] = 'spawn /home/boris/bin/i3/insert_unicode.sh'  # insert a unicode character
c.aliases['insert-snippet'] = "fake-key <Ctrl-S> ;; later 20 hint tw-editor-submenu"  # insert snippet (+ hint the dropdown menu)
c.aliases['insert-picture'] = 'fake-key <Ctrl-Shift-I> ;; later 20 hint tw-editor-submenu'  # insert picture (+ hint the dropdowm menu)
c.aliases['insert-wikilink'] = 'fake-key <Ctrl-L> ;; mode-enter insert ;; jseval -q -w main window.qutebrowserMode = "insert";'  # insert wikilink
c.aliases['insert-transclusion'] = 'fake-key <Ctrl-T> ;; mode-enter insert ;; jseval -q -w main window.qutebrowserMode = "insert";'  # insert transclusion
c.aliases['insert-macro'] = 'fake-key <Ctrl-M> ;; mode-enter insert ;; jseval -q -w main window.qutebrowserMode = "insert";'  # insert macro
c.aliases['excise'] = 'fake-key <Ctrl-E> ;; later 20 hint --rapid tw-editor-submenu'  # excise to other tiddler (+ hint the dropdowm menu)
c.aliases['codemirror-height'] = 'hint --first tw-editor-height ;; later 100 hint --rapid tw-editor-submenu'  # open editor height submenu and hint
c.aliases['fields-width'] = 'hint --first select'   # hint fields width select item

config.bind('<Space>al', 'tmap-live-view')
config.bind('<Space>am', 'tiddlymap')
config.bind('<Space>as', 'advanced-search')
config.bind('<Space>bb', 'list-buffers')
config.bind('<Space>bd', 'draft-buffers')
config.bind('<Space>ch', 'codemirror-height')
config.bind('<Space>e', 'excise')
config.bind('<Space>fm', 'missing-tiddlers')
config.bind('<Space>fr', 'recent-tiddlers')
config.bind('<Space>ft', 'file-tree')
config.bind('<Space>fw', 'fields-width')
config.bind('<Space>ii', 'insert-picture')
config.bind('<Space>il', 'insert-wikilink')
config.bind('<Space>im', 'insert-macro')
config.bind('<Space>ip', 'insert-picture')
config.bind('<Space>is', 'insert-snippet')
config.bind('<Space>it', 'insert-transclusion')
config.bind('<Space>iu', 'insert-unicode')
config.bind('<Space>n', 'new-tiddler')
config.bind('<Space>ss', 'sidebar-search')
config.bind('<Space>tp', 'toggle-preview')
config.bind('<Space>ts', 'toggle-sidebar')

config.bind('<Ctrl-C>al', 'tmap-live-view')
config.bind('<Ctrl-C>am', 'tiddlymap')
config.bind('<Ctrl-C>as', 'advanced-search')
config.bind('<Ctrl-C>bb', 'list-buffers')
config.bind('<Ctrl-C>bd', 'draft-buffers')
config.bind('<Ctrl-C>ch', 'codemirror-height')
config.bind('<Ctrl-C>e', 'excise')
config.bind('<Ctrl-C>fm', 'missing-tiddlers')
config.bind('<Ctrl-C>fr', 'recent-tiddlers')
config.bind('<Ctrl-C>ft', 'file-tree')
config.bind('<Ctrl-C>fw', 'fields-width')
config.bind('<Ctrl-C>ii', 'insert-picture')
config.bind('<Ctrl-C>il', 'insert-wikilink')
config.bind('<Ctrl-C>im', 'insert-macro')
config.bind('<Ctrl-C>ip', 'insert-picture')
config.bind('<Ctrl-C>is', 'insert-snippet')
config.bind('<Ctrl-C>it', 'insert-transclusion')
config.bind('<Ctrl-C>iu', 'insert-unicode')
config.bind('<Ctrl-C>n', 'new-tiddler')
config.bind('<Ctrl-C>ss', 'sidebar-search')
config.bind('<Ctrl-C>tp', 'toggle-preview')
config.bind('<Ctrl-C>ts', 'toggle-sidebar')

config.bind('<Ctrl-C>al', 'tmap-live-view_(insert-mode)', mode='insert')  # ok
config.bind('<Ctrl-C>am', 'tiddlymap_(insert-mode)', mode='insert')  # ok
config.bind('<Ctrl-C>as', 'advanced-search', mode='insert')  # ok
config.bind('<Ctrl-C>bb', 'list-buffers', mode='insert')  # ok
config.bind('<Ctrl-C>bd', 'draft-buffers_(insert-mode)', mode='insert')  # ok
config.bind('<Ctrl-C>ch', 'codemirror-height', mode='insert')  # ok
config.bind('<Ctrl-C>e', 'excise', mode='insert')  # ok
config.bind('<Ctrl-C>fm', 'missing-tiddlers_(insert-mode)', mode='insert')  # ok
config.bind('<Ctrl-C>fr', 'recent-tiddlers_(insert-mode)', mode='insert')  # ok
config.bind('<Ctrl-C>ft', 'file-tree_(insert-mode)', mode='insert')  # ok
config.bind('<Ctrl-C>fw', 'fields-width', mode='insert')  # ok
config.bind('<Ctrl-C>ii', 'insert-picture', mode='insert')  # ok
config.bind('<Ctrl-C>il', 'insert-wikilink', mode='insert')  # ok
config.bind('<Ctrl-C>im', 'insert-macro', mode='insert')  # ok  # this feature is broken!
config.bind('<Ctrl-C>ip', 'insert-picture', mode='insert')  # ok
config.bind('<Ctrl-C>is', 'insert-snippet', mode='insert')  # ok
config.bind('<Ctrl-C>it', 'insert-transclusion', mode='insert')  # ok  # this feature is broken!
config.bind('<Ctrl-C>iu', 'insert-unicode', mode='insert')  # ok
config.bind('<Ctrl-C>n', 'new-tiddler', mode='insert')  # ok
config.bind('<Ctrl-C>ss', 'sidebar-search', mode='insert')  # ok
config.bind('<Ctrl-C>tp', 'toggle-preview', mode='insert')  # ok
config.bind('<Ctrl-C>ts', 'toggle-sidebar', mode='insert')  # ok

config.bind('<Ctrl-C><Ctrl-J>', 'accept-changes', mode='insert')  # ok
config.bind('<Ctrl-C><Ctrl-V>', 'edit-text', mode='insert')  # ok
config.bind('<Ctrl-C><Ctrl-X>', 'mode-leave ;; hint cancel-and-delete ;; jseval -q -w main window.qutebrowserMode = "normal";', mode='insert')  # ok
config.bind('<Ctrl-C><Ctrl-X>', 'hint cancel-and-delete', mode='insert')  # ok

config.bind('<Ctrl-Meta-I>', 'fake-key <Shift-Tab>', mode='insert')

c.tabs.show = 'switching'

c.content.blocking.method = 'both'

config.bind('<Space>q', 'jseval "let scrPerc = document.documentElement.scrollTop;window.location.replace("#");window.scrollTo(0, scrPerc);"')

config.bind('f', 'hint links run jseval -q -w main var target = decodeURI("{hint-url}".split("#")[1]); story.navigateTiddler(target); focusedTiddler = target; listItems = document.querySelectorAll(".tc-topbar-left li"); for (const listItem of listItems) {listItem.style.backgroundColor = "blue";}; for (const listItem of listItems) {if (listItem.innerText.trim() === target) {listItem.style.backgroundColor = "purple";}};')

config.bind('<Ctrl-H>', 'jseval -q -w main var storyList = story.getStoryList(); var target = storyList[storyList.indexOf(focusedTiddler) - 1]; var listItems = document.querySelectorAll(".tc-topbar-left li"); if (target) {story.navigateTiddler(target); focusedTiddler = target; for (const listItem of listItems) {listItem.style.backgroundColor = "blue";}; for (const listItem of listItems) {if (listItem.innerText.trim() === target) {listItem.style.backgroundColor = "purple"}};}')
config.bind('<Ctrl-J>', 'jseval -q -w main var storyList = story.getStoryList(); var target = storyList[storyList.indexOf(focusedTiddler) + 1]; var listItems = document.querySelectorAll(".tc-topbar-left li"); if (target) {story.navigateTiddler(target); focusedTiddler = target; for (const listItem of listItems) {listItem.style.backgroundColor = "blue";}; for (const listItem of listItems) {if (listItem.innerText.trim() === target) {listItem.style.backgroundColor = "purple"}};}')
config.bind('<Ctrl-K>', 'jseval -q -w main var storyList = story.getStoryList(); var target = storyList[storyList.indexOf(focusedTiddler) - 1]; var listItems = document.querySelectorAll(".tc-topbar-left li"); if (target) {story.navigateTiddler(target); focusedTiddler = target; for (const listItem of listItems) {listItem.style.backgroundColor = "blue";}; for (const listItem of listItems) {if (listItem.innerText.trim() === target) {listItem.style.backgroundColor = "purple"}};}')
config.bind('<Ctrl-L>', 'jseval -q -w main var storyList = story.getStoryList(); var target = storyList[storyList.indexOf(focusedTiddler) + 1]; var listItems = document.querySelectorAll(".tc-topbar-left li"); if (target) {story.navigateTiddler(target); focusedTiddler = target; for (const listItem of listItems) {listItem.style.backgroundColor = "blue";}; for (const listItem of listItems) {if (listItem.innerText.trim() === target) {listItem.style.backgroundColor = "purple"}};}')
config.bind('<Alt-H>', 'jseval -q -w main var storyList = story.getStoryList(); var target = storyList[storyList.indexOf(focusedTiddler) - 1]; var listItems = document.querySelectorAll(".tc-topbar-left li"); if (target) {story.navigateTiddler(target); focusedTiddler = target; for (const listItem of listItems) {listItem.style.backgroundColor = "blue";}; for (const listItem of listItems) {if (listItem.innerText.trim() === target) {listItem.style.backgroundColor = "purple"}};}')
config.bind('<Alt-J>', 'jseval -q -w main var storyList = story.getStoryList(); var target = storyList[storyList.indexOf(focusedTiddler) + 1]; var listItems = document.querySelectorAll(".tc-topbar-left li"); if (target) {story.navigateTiddler(target); focusedTiddler = target; for (const listItem of listItems) {listItem.style.backgroundColor = "blue";}; for (const listItem of listItems) {if (listItem.innerText.trim() === target) {listItem.style.backgroundColor = "purple"}};}')
config.bind('<Alt-K>', 'jseval -q -w main var storyList = story.getStoryList(); var target = storyList[storyList.indexOf(focusedTiddler) - 1]; var listItems = document.querySelectorAll(".tc-topbar-left li"); if (target) {story.navigateTiddler(target); focusedTiddler = target; for (const listItem of listItems) {listItem.style.backgroundColor = "blue";}; for (const listItem of listItems) {if (listItem.innerText.trim() === target) {listItem.style.backgroundColor = "purple"}};}')
config.bind('<Alt-L>', 'jseval -q -w main var storyList = story.getStoryList(); var target = storyList[storyList.indexOf(focusedTiddler) + 1]; var listItems = document.querySelectorAll(".tc-topbar-left li"); if (target) {story.navigateTiddler(target); focusedTiddler = target; for (const listItem of listItems) {listItem.style.backgroundColor = "blue";}; for (const listItem of listItems) {if (listItem.innerText.trim() === target) {listItem.style.backgroundColor = "purple"}};}')
config.bind('<Alt-H>', 'jseval -q -w main var storyList = story.getStoryList(); var target = storyList[storyList.indexOf(focusedTiddler) - 1]; var listItems = document.querySelectorAll(".tc-topbar-left li"); if (target) {story.navigateTiddler(target); focusedTiddler = target; for (const listItem of listItems) {listItem.style.backgroundColor = "blue";}; for (const listItem of listItems) {if (listItem.innerText.trim() === target) {listItem.style.backgroundColor = "purple"}};}', mode='insert')
config.bind('<Alt-J>', 'jseval -q -w main var storyList = story.getStoryList(); var target = storyList[storyList.indexOf(focusedTiddler) + 1]; var listItems = document.querySelectorAll(".tc-topbar-left li"); if (target) {story.navigateTiddler(target); focusedTiddler = target; for (const listItem of listItems) {listItem.style.backgroundColor = "blue";}; for (const listItem of listItems) {if (listItem.innerText.trim() === target) {listItem.style.backgroundColor = "purple"}};}', mode='insert')
config.bind('<Alt-K>', 'jseval -q -w main var storyList = story.getStoryList(); var target = storyList[storyList.indexOf(focusedTiddler) - 1]; var listItems = document.querySelectorAll(".tc-topbar-left li"); if (target) {story.navigateTiddler(target); focusedTiddler = target; for (const listItem of listItems) {listItem.style.backgroundColor = "blue";}; for (const listItem of listItems) {if (listItem.innerText.trim() === target) {listItem.style.backgroundColor = "purple"}};}', mode='insert')
config.bind('<Alt-L>', 'jseval -q -w main var storyList = story.getStoryList(); var target = storyList[storyList.indexOf(focusedTiddler) + 1]; var listItems = document.querySelectorAll(".tc-topbar-left li"); if (target) {story.navigateTiddler(target); focusedTiddler = target; for (const listItem of listItems) {listItem.style.backgroundColor = "blue";}; for (const listItem of listItems) {if (listItem.innerText.trim() === target) {listItem.style.backgroundColor = "purple"}};}', mode='insert')
config.bind('gh', 'jseval -q -w main var storyList = story.getStoryList(); var target = storyList[storyList.indexOf(focusedTiddler) - 1]; var listItems = document.querySelectorAll(".tc-topbar-left li"); if (target) {story.navigateTiddler(target); focusedTiddler = target; for (const listItem of listItems) {listItem.style.backgroundColor = "blue";}; for (const listItem of listItems) {if (listItem.innerText.trim() === target) {listItem.style.backgroundColor = "purple"}};}')
config.bind('gj', 'jseval -q -w main var storyList = story.getStoryList(); var target = storyList[storyList.indexOf(focusedTiddler) + 1]; var listItems = document.querySelectorAll(".tc-topbar-left li"); if (target) {story.navigateTiddler(target); focusedTiddler = target; for (const listItem of listItems) {listItem.style.backgroundColor = "blue";}; for (const listItem of listItems) {if (listItem.innerText.trim() === target) {listItem.style.backgroundColor = "purple"}};}')
config.bind('gk', 'jseval -q -w main var storyList = story.getStoryList(); var target = storyList[storyList.indexOf(focusedTiddler) - 1]; var listItems = document.querySelectorAll(".tc-topbar-left li"); if (target) {story.navigateTiddler(target); focusedTiddler = target; for (const listItem of listItems) {listItem.style.backgroundColor = "blue";}; for (const listItem of listItems) {if (listItem.innerText.trim() === target) {listItem.style.backgroundColor = "purple"}};}')
config.bind('gl', 'jseval -q -w main var storyList = story.getStoryList(); var target = storyList[storyList.indexOf(focusedTiddler) + 1]; var listItems = document.querySelectorAll(".tc-topbar-left li"); if (target) {story.navigateTiddler(target); focusedTiddler = target; for (const listItem of listItems) {listItem.style.backgroundColor = "blue";}; for (const listItem of listItems) {if (listItem.innerText.trim() === target) {listItem.style.backgroundColor = "purple"}};}')

config.bind('<Space>`', 'jseval -q -w main var target = story.getStoryList()[0]; var listItems = document.querySelectorAll(".tc-topbar-left li"); if (target) {story.navigateTiddler(target); focusedTiddler = target; for (const listItem of listItems) {listItem.style.backgroundColor = "blue";}; for (const listItem of listItems) {if (listItem.innerText.trim() === target) {listItem.style.backgroundColor = "purple"}};};')
config.bind('<Space>2', 'jseval -q -w main var target = story.getStoryList()[1]; var listItems = document.querySelectorAll(".tc-topbar-left li"); if (target) {story.navigateTiddler(target); focusedTiddler = target; for (const listItem of listItems) {listItem.style.backgroundColor = "blue";}; for (const listItem of listItems) {if (listItem.innerText.trim() === target) {listItem.style.backgroundColor = "purple"}};};')
config.bind('<Space>3', 'jseval -q -w main var target = story.getStoryList()[2]; var listItems = document.querySelectorAll(".tc-topbar-left li"); if (target) {story.navigateTiddler(target); focusedTiddler = target; for (const listItem of listItems) {listItem.style.backgroundColor = "blue";}; for (const listItem of listItems) {if (listItem.innerText.trim() === target) {listItem.style.backgroundColor = "purple"}};};')
config.bind('<Space>4', 'jseval -q -w main var target = story.getStoryList()[3]; var listItems = document.querySelectorAll(".tc-topbar-left li"); if (target) {story.navigateTiddler(target); focusedTiddler = target; for (const listItem of listItems) {listItem.style.backgroundColor = "blue";}; for (const listItem of listItems) {if (listItem.innerText.trim() === target) {listItem.style.backgroundColor = "purple"}};};')
config.bind('<Space>5', 'jseval -q -w main var target = story.getStoryList()[4]; var listItems = document.querySelectorAll(".tc-topbar-left li"); if (target) {story.navigateTiddler(target); focusedTiddler = target; for (const listItem of listItems) {listItem.style.backgroundColor = "blue";}; for (const listItem of listItems) {if (listItem.innerText.trim() === target) {listItem.style.backgroundColor = "purple"}};};')
config.bind('<Space>6', 'jseval -q -w main var target = story.getStoryList()[5]; var listItems = document.querySelectorAll(".tc-topbar-left li"); if (target) {story.navigateTiddler(target); focusedTiddler = target; for (const listItem of listItems) {listItem.style.backgroundColor = "blue";}; for (const listItem of listItems) {if (listItem.innerText.trim() === target) {listItem.style.backgroundColor = "purple"}};};')
config.bind('<Space>7', 'jseval -q -w main var target = story.getStoryList()[6]; var listItems = document.querySelectorAll(".tc-topbar-left li"); if (target) {story.navigateTiddler(target); focusedTiddler = target; for (const listItem of listItems) {listItem.style.backgroundColor = "blue";}; for (const listItem of listItems) {if (listItem.innerText.trim() === target) {listItem.style.backgroundColor = "purple"}};};')
config.bind('<Space>8', 'jseval -q -w main var target = story.getStoryList()[7]; var listItems = document.querySelectorAll(".tc-topbar-left li"); if (target) {story.navigateTiddler(target); focusedTiddler = target; for (const listItem of listItems) {listItem.style.backgroundColor = "blue";}; for (const listItem of listItems) {if (listItem.innerText.trim() === target) {listItem.style.backgroundColor = "purple"}};};')
config.bind('<Space>9', 'jseval -q -w main var target = story.getStoryList()[8]; var listItems = document.querySelectorAll(".tc-topbar-left li"); if (target) {story.navigateTiddler(target); focusedTiddler = target; for (const listItem of listItems) {listItem.style.backgroundColor = "blue";}; for (const listItem of listItems) {if (listItem.innerText.trim() === target) {listItem.style.backgroundColor = "purple"}};};')
config.bind('<Space>10', 'jseval -q -w main var target = story.getStoryList()[9]; var listItems = document.querySelectorAll(".tc-topbar-left li"); if (target) {story.navigateTiddler(target); focusedTiddler = target; for (const listItem of listItems) {listItem.style.backgroundColor = "blue";}; for (const listItem of listItems) {if (listItem.innerText.trim() === target) {listItem.style.backgroundColor = "purple"}};};')
config.bind('<Space>11', 'jseval -q -w main var target = story.getStoryList()[10]; var listItems = document.querySelectorAll(".tc-topbar-left li"); if (target) {story.navigateTiddler(target); focusedTiddler = target; for (const listItem of listItems) {listItem.style.backgroundColor = "blue";}; for (const listItem of listItems) {if (listItem.innerText.trim() === target) {listItem.style.backgroundColor = "purple"}};};')
config.bind('<Space>12', 'jseval -q -w main var target = story.getStoryList()[11]; var listItems = document.querySelectorAll(".tc-topbar-left li"); if (target) {story.navigateTiddler(target); focusedTiddler = target; for (const listItem of listItems) {listItem.style.backgroundColor = "blue";}; for (const listItem of listItems) {if (listItem.innerText.trim() === target) {listItem.style.backgroundColor = "purple"}};};')
config.bind('<Space>13', 'jseval -q -w main var target = story.getStoryList()[12]; var listItems = document.querySelectorAll(".tc-topbar-left li"); if (target) {story.navigateTiddler(target); focusedTiddler = target; for (const listItem of listItems) {listItem.style.backgroundColor = "blue";}; for (const listItem of listItems) {if (listItem.innerText.trim() === target) {listItem.style.backgroundColor = "purple"}};};')
config.bind('<Space>14', 'jseval -q -w main var target = story.getStoryList()[13]; var listItems = document.querySelectorAll(".tc-topbar-left li"); if (target) {story.navigateTiddler(target); focusedTiddler = target; for (const listItem of listItems) {listItem.style.backgroundColor = "blue";}; for (const listItem of listItems) {if (listItem.innerText.trim() === target) {listItem.style.backgroundColor = "purple"}};};')
config.bind('<Space>15', 'jseval -q -w main var target = story.getStoryList()[14]; var listItems = document.querySelectorAll(".tc-topbar-left li"); if (target) {story.navigateTiddler(target); focusedTiddler = target; for (const listItem of listItems) {listItem.style.backgroundColor = "blue";}; for (const listItem of listItems) {if (listItem.innerText.trim() === target) {listItem.style.backgroundColor = "purple"}};};')
config.bind('<Space>16', 'jseval -q -w main var target = story.getStoryList()[15]; var listItems = document.querySelectorAll(".tc-topbar-left li"); if (target) {story.navigateTiddler(target); focusedTiddler = target; for (const listItem of listItems) {listItem.style.backgroundColor = "blue";}; for (const listItem of listItems) {if (listItem.innerText.trim() === target) {listItem.style.backgroundColor = "purple"}};};')
config.bind('<Space>17', 'jseval -q -w main var target = story.getStoryList()[16]; var listItems = document.querySelectorAll(".tc-topbar-left li"); if (target) {story.navigateTiddler(target); focusedTiddler = target; for (const listItem of listItems) {listItem.style.backgroundColor = "blue";}; for (const listItem of listItems) {if (listItem.innerText.trim() === target) {listItem.style.backgroundColor = "purple"}};};')
config.bind('<Space>18', 'jseval -q -w main var target = story.getStoryList()[17]; var listItems = document.querySelectorAll(".tc-topbar-left li"); if (target) {story.navigateTiddler(target); focusedTiddler = target; for (const listItem of listItems) {listItem.style.backgroundColor = "blue";}; for (const listItem of listItems) {if (listItem.innerText.trim() === target) {listItem.style.backgroundColor = "purple"}};};')
config.bind('<Space>19', 'jseval -q -w main var target = story.getStoryList()[18]; var listItems = document.querySelectorAll(".tc-topbar-left li"); if (target) {story.navigateTiddler(target); focusedTiddler = target; for (const listItem of listItems) {listItem.style.backgroundColor = "blue";}; for (const listItem of listItems) {if (listItem.innerText.trim() === target) {listItem.style.backgroundColor = "purple"}};};')

c.keyhint.blacklist.append('<Space>1*')
c.keyhint.blacklist.append('<Space>2')
c.keyhint.blacklist.append('<Space>3')
c.keyhint.blacklist.append('<Space>4')
c.keyhint.blacklist.append('<Space>5')
c.keyhint.blacklist.append('<Space>6')
c.keyhint.blacklist.append('<Space>7')
c.keyhint.blacklist.append('<Space>8')
c.keyhint.blacklist.append('<Space>9')
c.keyhint.blacklist.append('<Space>$')
c.keyhint.blacklist.append('<Space>`')
